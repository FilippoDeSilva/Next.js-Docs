name: 🧭 Next.js Docs to PDF (Latest Only)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 🧹 Checkout repo
        uses: actions/checkout@v4

      - name: ⚙️ Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 📦 Install dependencies
        run: |
          pip install aiohttp beautifulsoup4 weasyprint

      - name: 📖 Fetch Latest Next.js Docs and Make PDF
        run: |
          python - <<'EOF'
          import asyncio, aiohttp
          from bs4 import BeautifulSoup
          from weasyprint import HTML, CSS

          BASE_URL = "https://nextjs.org/docs"
          HEADERS = {"User-Agent": "Mozilla/5.0"}

          async def get_links(session):
              async with session.get(BASE_URL, headers=HEADERS) as resp:
                  html = await resp.text()
                  soup = BeautifulSoup(html, "html.parser")
                  links = []
                  for a in soup.find_all("a", href=True):
                      href = a["href"]
                      if href.startswith("/docs/") and not any(href.startswith(f"/docs/{v}/") for v in ["13", "14"]):
                          links.append(f"https://nextjs.org{href}")
                  # Remove duplicates
                  return list(dict.fromkeys(links))

          async def fetch_page(session, url):
              try:
                  async with session.get(url, headers=HEADERS) as resp:
                      html = await resp.text()
                      return html
              except Exception as e:
                  print(f"❌ Failed {url}: {e}")
                  return ""

          async def main():
              async with aiohttp.ClientSession() as session:
                  links = await get_links(session)
                  print(f"📄 Found {len(links)} pages.")
                  full_html = ""
                  for i, link in enumerate(links, 1):
                      print(f"({i}/{len(links)}) Fetching {link}")
                      page_html = await fetch_page(session, link)
                      full_html += page_html + "<hr>"

                  # Generate PDF
                  print("🧾 Rendering PDF...")
                  css = CSS(string="""
                      @page { margin: 1cm; }
                      body { font-family: Arial, sans-serif; color: #222; }
                  """)
                  HTML(string=full_html, base_url=BASE_URL).write_pdf("NextJS_Latest_Docs.pdf", stylesheets=[css])
                  print("✅ PDF ready!")

          asyncio.run(main())
          EOF

      - name: 📤 Upload PDF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-docs-latest
          path: NextJS_Latest_Docs.pdf
