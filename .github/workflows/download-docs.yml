name: Next.js Docs to Styled PDF

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 1'  # Every Monday at 3:00 UTC

jobs:
  export_docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer node-fetch mkdirp

      - name: Generate Styled PDFs from Next.js Docs
        run: |
          node -e "
          const puppeteer = require('puppeteer');
          const fetch = require('node-fetch');
          const fs = require('fs');
          const path = require('path');
          const mkdirp = require('mkdirp');

          (async () => {
            const baseUrl = 'https://nextjs.org/docs';
            const browser = await puppeteer.launch({ headless: 'new' });
            const page = await browser.newPage();
            mkdirp.sync('pdf_output');

            const links = await getDocLinks(baseUrl);
            for (const link of links) {
              const filename = sanitize(link.replace(baseUrl, '')) || 'index';
              const pdfPath = path.join('pdf_output', filename + '.pdf');

              try {
                await page.goto(link, { waitUntil: 'networkidle2' });
                await page.pdf({
                  path: pdfPath,
                  format: 'A4',
                  printBackground: true,
                  margin: { top: '20mm', bottom: '20mm', left: '15mm', right: '15mm' }
                });
                console.log('✅ Saved:', pdfPath);
              } catch (err) {
                console.warn('❌ Failed:', link, err.message);
              }
            }

            await browser.close();

            async function getDocLinks(base) {
              const res = await fetch(base);
              const html = await res.text();
              const matches = [...html.matchAll(/href=\\"(\\/docs[^\\"]+)\\"/g)];
              const urls = Array.from(new Set(matches.map(m => 'https://nextjs.org' + m[1])));
              return urls.filter(u => !u.includes('#'));
            }

            function sanitize(str) {
              return str.replace(/[\\\\/\\\\?%*:|\\\\"<>]/g, '-').replace(/^-+|-+$/g, '');
            }
          })();
        "

      - name: Upload PDFs
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Docs_PDFs
          path: pdf_output/