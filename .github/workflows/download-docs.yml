name: Build Next.js Docs PDF

on:
  push:
    paths:
      - 'nextjs-docs/canary_docs/**'
  workflow_dispatch:

jobs:
  build_pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install jq and necessary packages
        run: sudo apt-get update && sudo apt-get install -y jq poppler-utils

      - name: Prepare directories
        run: |
          mkdir -p pdf-docs html_cache pdf_cache tmp_mdx_project

      - name: Detect changed MDX/MD files
        id: detect_changes
        run: |
          DOCS_PATH="nextjs-docs/canary_docs/docs"
          FILES_JSON="tmp_files.json"
          find "$DOCS_PATH" -type f \( -name "*.md" -o -name "*.mdx" \) | sort > "$FILES_JSON"
          echo "::set-output name=all_files::$(cat $FILES_JSON | jq -R . | jq -s .)"

      - name: Setup Node project
        run: |
          cd tmp_mdx_project
          npm init -y
          npm install @mdx-js/mdx puppeteer pdf-lib
          cd ../

      - name: Compile MDX → HTML in parallel
        run: |
          FILES_JSON="tmp_files.json"
          HTML_DIR="html_cache"
          node -e "
          const fs = require('fs');
          const path = require('path');
          const { Worker } = require('worker_threads');
          const mdx = require('./tmp_mdx_project/node_modules/@mdx-js/mdx');
          const files = JSON.parse(fs.readFileSync('$FILES_JSON', 'utf8'));
          const concurrency = require('os').cpus().length;
          let index = 0;
          function runNext() {
            if(index >= files.length) return Promise.resolve();
            const file = files[index++];
            return new Promise((resolve,reject)=>{
              const worker = new Worker(\`
                const { parentPort, workerData } = require('worker_threads');
                const fs = require('fs');
                const mdx = require('\${workerData.mdx}');
                (async () => {
                  const content = fs.readFileSync(workerData.file,'utf8');
                  const html = '<div>'+ (await mdx.compile(content)).value + '</div>';
                  const outFile = workerData.htmlDir + '/' + workerData.file.replace(/[\/:]/g,'_') + '.html';
                  fs.writeFileSync(outFile, html);
                  parentPort.postMessage(workerData.file);
                })();
              \`, { eval:true, workerData:{ file, htmlDir:'../html_cache', mdx: path.resolve('tmp_mdx_project/node_modules/@mdx-js/mdx') } });
              worker.on('message', resolve);
              worker.on('error', reject);
              worker.on('exit', code => { if(code!==0) reject(new Error('Worker exit '+code)); });
            }).then(()=>runNext());
          }
          async function main(){
            const pool = [];
            for(let i=0;i<Math.min(concurrency,files.length);i++) pool.push(runNext());
            await Promise.all(pool);
          }
          main().then(()=>process.exit(0)).catch(err=>{ console.error(err); process.exit(1)});
          "

      - name: Convert HTML → PDF in parallel
        run: |
          node -e "
          const puppeteer = require('./tmp_mdx_project/node_modules/puppeteer');
          const fs = require('fs');
          const path = require('path');
          const files = fs.readdirSync('html_cache').filter(f=>f.endsWith('.html'));
          const concurrency = require('os').cpus().length;
          let index = 0;
          function runNext() {
            if(index >= files.length) return Promise.resolve();
            const file = files[index++];
            return puppeteer.launch({args:['--no-sandbox','--disable-setuid-sandbox','--disable-dev-shm-usage']})
              .then(browser => browser.newPage()
                .then(page => {
                  const content = fs.readFileSync('html_cache/' + file,'utf8');
                  return page.setContent(content,{waitUntil:'networkidle2'})
                    .then(()=>page.pdf({ path:'pdf_cache/' + file.replace('.html','.pdf'), format:'A4', printBackground:true }))
                    .finally(()=>browser.close());
                })
              ).then(()=>runNext());
          }
          async function main(){
            const pool = [];
            for(let i=0;i<Math.min(concurrency,files.length);i++) pool.push(runNext());
            await Promise.all(pool);
          }
          main().then(()=>process.exit(0)).catch(err=>{ console.error(err); process.exit(1)});
          "

      - name: Merge all PDFs
        run: |
          node -e "
          const fs = require('fs');
          const { PDFDocument } = require('./tmp_mdx_project/node_modules/pdf-lib');
          (async () => {
            const pdfFiles = fs.readdirSync('pdf_cache').filter(f=>f.endsWith('.pdf')).sort();
            const mergedPdf = await PDFDocument.create();
            for(const pdfFile of pdfFiles){
              const pdfBytes = fs.readFileSync('pdf_cache/' + pdfFile);
              const pdf = await PDFDocument.load(pdfBytes);
              const copied = await mergedPdf.copyPages(pdf, pdf.getPageIndices());
              copied.forEach(p => mergedPdf.addPage(p));
            }
            fs.writeFileSync('pdf-docs/NextJS_Canary_Docs.pdf', await mergedPdf.save());
          })();
          "

      - name: Record docs hash
        run: echo "f8816b06" > docs_hash.txt

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v3
        with:
          name: NextJS-Canary-Docs-PDF
          path: pdf-docs/NextJS_Canary_Docs.pdf