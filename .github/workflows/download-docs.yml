name: Generate Next.js Docs PDF (Fast)

on:
  workflow_dispatch:

jobs:
  build-pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install puppeteer cheerio axios highlight.js fs

      - name: Generate Next.js Docs PDF (Fast)
        run: |
          node <<'JS'
          const fs = require('fs');
          const puppeteer = require('puppeteer');
          const cheerio = require('cheerio');
          const axios = require('axios');
          const hljs = require('highlight.js');

          const baseUrl = 'https://nextjs.org/docs';

          (async () => {
            // Step 1: Fetch all links directly from docs homepage
            const homepage = await axios.get(baseUrl);
            const $ = cheerio.load(homepage.data);
            const links = Array.from($('a'))
              .map(a => a.attribs.href)
              .filter(h => h && h.startsWith('/docs/app'))
              .map(h => `https://nextjs.org${h}`);

            console.log(`Found ${links.length} doc pages...`);

            // Step 2: Fetch all pages in parallel
            const pages = await Promise.allSettled(
              links.map(async (link) => {
                try {
                  const { data } = await axios.get(link);
                  const $ = cheerio.load(data);

                  // Clean layout
                  $('aside, header, footer, nav').remove();
                  $('body').css({ 'background': '#fff', 'color': '#000' });

                  // Highlight code blocks + make scrollable
                  $('pre code').each((_, el) => {
                    const code = $(el).text();
                    try {
                      const highlighted = hljs.highlightAuto(code).value;
                      $(el).html(highlighted);
                    } catch {
                      $(el).text(code);
                    }
                    $(el).css({
                      'overflow-x': 'auto',
                      'display': 'block',
                      'white-space': 'pre'
                    });
                  });

                  return `<section style="max-width:900px;margin:0 auto;">
                    <h1>${$('h1').first().text()}</h1>
                    ${$('main').html() || $('body').html()}
                    <hr style="margin:40px 0;"/>
                  </section>`;
                } catch (err) {
                  console.warn(`❌ Failed ${link}:`, err.message);
                  return '';
                }
              })
            );

            // Step 3: Combine all content into one HTML doc
            const allContent = pages
              .map(p => (p.status === 'fulfilled' ? p.value : ''))
              .join('\n');

            const finalHTML = `
              <html>
              <head>
                <meta charset="utf-8"/>
                <style>
                  body { font-family: Arial, sans-serif; line-height: 1.6; }
                  pre { background: #f5f5f5; padding: 10px; border-radius: 6px; }
                  code { font-family: monospace; }
                  h1, h2, h3 { font-weight: bold; }
                </style>
              </head>
              <body>
                ${allContent}
              </body>
              </html>
            `;

            fs.writeFileSync('docs.html', finalHTML);

            // Step 4: Render only once with Puppeteer
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();
            await page.setContent(finalHTML, { waitUntil: 'networkidle0' });

            await page.pdf({
              path: 'NextJS_Docs_Professional.pdf',
              format: 'A4',
              printBackground: true,
              margin: { top: '20px', bottom: '20px', left: '20px', right: '20px' }
            });

            await browser.close();
            console.log("✅ PDF generated successfully!");
          })();
          JS

      - name: Upload PDF
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Docs_Professional
          path: NextJS_Docs_Professional.pdf