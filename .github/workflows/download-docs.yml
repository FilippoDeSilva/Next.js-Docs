name: Generate Next.js Docs PDF

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install puppeteer pdf-lib

      - name: Generate Styled Next.js Docs PDF
        run: |
          node <<'JS'
          const fs = require("fs");
          const puppeteer = require("puppeteer");
          const { PDFDocument, StandardFonts, rgb } = require("pdf-lib");

          const BASE_URL = "https://nextjs.org/docs";
          const OUTPUT_PDF = process.env.OUTPUT_PDF || "NextJS_Docs_Styled.pdf";
          const TIMEOUT = 180000;
          const CONCURRENCY = 2;
          const BATCH_LIMIT = 40;

          function sleep(ms) {
            return new Promise((res) => setTimeout(res, ms));
          }

          async function launchBrowser() {
            return puppeteer.launch({
              headless: true,
              args: [
                "--no-sandbox",
                "--disable-setuid-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--no-zygote"
              ]
            });
          }

          (async () => {
            console.log("Launching browser...");
            let browser = await launchBrowser();
            const controlPage = await browser.newPage();
            controlPage.setDefaultNavigationTimeout(TIMEOUT);

            // Collect docs links
            await controlPage.goto(BASE_URL, { waitUntil: "networkidle2", timeout: TIMEOUT });
            await controlPage.waitForSelector("main").catch(() => {});
            const rawLinks = await controlPage.evaluate(() => {
              return Array.from(document.querySelectorAll('a[href^="/docs"]')).map((a) =>
                new URL(a.getAttribute("href"), location.origin).href
              );
            });
            await controlPage.close();

            let uniqueLinks = [...new Set(rawLinks)].filter((u) =>
              u.startsWith("https://nextjs.org/docs")
            );
            console.log(`Found ${uniqueLinks.length} doc links.`);

            async function renderPage(url, idx) {
              const page = await browser.newPage();
              page.setDefaultNavigationTimeout(TIMEOUT);
              await page.setViewport({ width: 1400, height: 1000 });

              try {
                console.log(`[${idx}] Loading ${url}`);
                await page.goto(url, { waitUntil: "networkidle0", timeout: TIMEOUT });
                await page.waitForSelector("main", { timeout: 60000 }).catch(() => {});

                await page.evaluate(() => {
                  document.querySelectorAll("header, footer, nav, aside").forEach((el) => el.remove());
                  document.querySelectorAll("details").forEach((d) => (d.open = true));
                  const main =
                    document.querySelector("main") ||
                    document.querySelector("article") ||
                    document.body;
                  if (main) {
                    main.style.margin = "0 auto";
                    main.style.maxWidth = "1000px";
                  }
                  document.querySelectorAll("pre").forEach((pre) => {
                    pre.style.whiteSpace = "pre";
                    pre.style.overflowX = "auto";
                    pre.style.border = "1px solid #ddd";
                    pre.style.borderRadius = "6px";
                    pre.style.padding = "10px";
                    pre.style.background = "#f9f9f9";
                  });
                  document.querySelectorAll("img, figure").forEach((img) => {
                    img.style.maxWidth = "100%";
                    img.style.height = "auto";
                  });

                  // remove "Was this helpful"
                  Array.from(document.querySelectorAll("button,div,section,span,p")).forEach((n) => {
                    if (n.innerText && /was this helpful/i.test(n.innerText)) {
                      const container = n.closest("section,article,div") || n;
                      if (container) container.remove();
                    }
                  });
                });

                await sleep(300);
                const buf = await page.pdf({
                  printBackground: true,
                  format: "A4",
                  margin: { top: 12, bottom: 20, left: 12, right: 12 }
                });

                await page.close();
                console.log(`[${idx}] Rendered successfully`);
                return buf;
              } catch (e) {
                console.warn(`[${idx}] Failed: ${e.message}`);
                try { await page.close(); } catch {}
                return null;
              }
            }

            let buffers = [];
            for (let i = 0; i < uniqueLinks.length; i++) {
              if (i > 0 && i % BATCH_LIMIT === 0) {
                console.log("Restarting browser to free memory...");
                await browser.close();
                browser = await launchBrowser();
              }

              const buf = await renderPage(uniqueLinks[i], i + 1);
              if (buf) buffers.push(buf);

              if (i % CONCURRENCY === 0) await sleep(500);
            }

            console.log("Merging PDFs...");
            const finalPdf = await PDFDocument.create();
            for (const buf of buffers) {
              const src = await PDFDocument.load(buf);
              const copied = await finalPdf.copyPages(src, src.getPageIndices());
              copied.forEach((p) => finalPdf.addPage(p));
            }

            // page numbers
            const helv = await finalPdf.embedFont(StandardFonts.Helvetica);
            const pages = finalPdf.getPages();
            pages.forEach((p, i) => {
              const { width } = p.getSize();
              p.drawText(String(i + 1), {
                x: width / 2 - 8,
                y: 10,
                size: 9,
                font: helv,
                color: rgb(0, 0, 0),
              });
            });

            const outBytes = await finalPdf.save();
            fs.writeFileSync(OUTPUT_PDF, outBytes);
            console.log("Saved:", OUTPUT_PDF);

            await browser.close();
          })();
          JS
        env:
          OUTPUT_PDF: NextJS_Docs_Styled.pdf

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Docs_Styled
          path: NextJS_Docs_Styled.pdf