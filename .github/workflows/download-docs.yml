name: Next.js Docs Archiver

on:
  workflow_dispatch:   # Manual trigger
  schedule:
    - cron: "0 0 * * *"   # Every midnight UTC

jobs:
  archive-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 weasyprint pyppeteer

      - name: Download Next.js Docs (with assets & dark mode)
        run: |
          import os, requests, asyncio
          from bs4 import BeautifulSoup
          from pyppeteer import launch
          from pathlib import Path

          BASE_URL = "https://nextjs.org/docs"
          OUT_DIR = Path("docs_html")
          OUT_DIR.mkdir(exist_ok=True)

          # Fetch page HTML
          def fetch_page(url):
              r = requests.get(url, timeout=30)
              r.raise_for_status()
              return r.text

          # Extract links from main docs page
          html = fetch_page(BASE_URL)
          soup = BeautifulSoup(html, "html.parser")
          links = [a["href"] for a in soup.select("a[href^='/docs']")]
          links = list(set(BASE_URL + l for l in links))

          # Save each doc page
          for link in links:
              try:
                  page_html = fetch_page(link)
                  filename = OUT_DIR / (link.split("/")[-1] or "index") 
                  (filename.with_suffix(".html")).write_text(page_html, encoding="utf-8")
              except Exception as e:
                  print(f"Failed {link}: {e}")

          print(f"Downloaded {len(links)} pages to {OUT_DIR}")

          # Convert main docs to PDF with dark mode
          async def render_pdf():
              browser = await launch(args=["--no-sandbox"])
              page = await browser.newPage()
              await page.goto(BASE_URL, {"waitUntil": "networkidle2"})
              # Force dark mode
              await page.addStyleTag({"content": "html { color-scheme: dark; }"})
              await page.pdf({
                  "path": "Nextjs_Docs.pdf",
                  "format": "A4",
                  "printBackground": True
              })
              await browser.close()

          asyncio.get_event_loop().run_until_complete(render_pdf())

      - name: Upload Docs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-docs-html
          path: docs_html

      - name: Upload PDF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-docs-pdf
          path: Nextjs_Docs.pdf