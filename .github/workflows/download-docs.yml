name: Generate Full Next.js Docs PDF (HTTrack + Progress Bars)

on:
  workflow_dispatch:

jobs:
  build_pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y httrack pv
          npm install puppeteer pdf-lib cli-progress

      # 🧭 HTTrack with live progress bar
      - name: Mirror Next.js Docs (Progress Tracked)
        run: |
          mkdir -p docs_mirror
          echo "🌐 Starting HTTrack mirror with live progress..."

          # Run httrack in background and monitor its log
          httrack "https://nextjs.org/docs" \
            --path docs_mirror \
            --robots=0 \
            --depth=2 \
            --near \
            --keep-alive \
            --sockets=8 \
            --disable-security-limits \
            --max-rate=0 \
            --updatehack \
            --verbose \
            --display \
            --disable-security-limits \
            -%v \
            > httrack.log 2>&1 &

          PID=$!

          # Show progress bar as file grows
          echo "⏳ Mirroring in progress... (watching httrack.log)"
          while ps -p $PID > /dev/null; do
            lines=$(wc -l < httrack.log)
            echo -ne "🕸️  Downloaded ~${lines} lines of logs...\r"
            sleep 5
          done

          wait $PID
          echo ""
          echo "✅ HTTrack mirroring complete!"
          echo "Mirror directory size:"
          du -sh docs_mirror || true

      # 📄 Generate PDF with Node progress bar
      - name: Generate PDF from mirrored docs
        run: |
          node <<'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');
          const { PDFDocument } = require('pdf-lib');
          const cliProgress = require('cli-progress');

          const OUTPUT_PDF = 'NextJS_Full_Offline.pdf';
          const DOCS_DIR = 'docs_mirror/nextjs.org/docs/';

          async function* walk(dir) {
            for (const d of await fs.promises.readdir(dir, { withFileTypes: true })) {
              const fullPath = path.join(dir, d.name);
              if (d.isDirectory()) yield* walk(fullPath);
              else if (d.name.endsWith('.html')) yield fullPath;
            }
          }

          (async () => {
            const browser = await puppeteer.launch({
              headless: "new",
              args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
            });
            const page = await browser.newPage();
            page.setDefaultNavigationTimeout(0);

            const tempDir = 'pdf_parts';
            fs.mkdirSync(tempDir, { recursive: true });

            const files = [];
            for await (const f of walk(DOCS_DIR)) files.push(f);
            console.log(`Rendering ${files.length} pages...\n`);

            const bar = new cliProgress.SingleBar({
              format: '📄 Rendering PDF [{bar}] {percentage}% | {value}/{total} pages',
              barCompleteChar: '█',
              barIncompleteChar: '░',
              hideCursor: true
            });
            bar.start(files.length, 0);

            let i = 0;
            for (const filePath of files) {
              const url = `file://${path.resolve(filePath)}`;
              await page.goto(url, { waitUntil: 'networkidle2' });

              await page.evaluate(() => {
                document.querySelectorAll('header, footer, nav, aside, [aria-label="Feedback"], [data-testid="docs-rating"]').forEach(el => el.remove());
                document.body.style.background = '#fff';
                document.body.style.color = '#000';
                document.body.style.margin = 'auto';
                document.body.style.maxWidth = '900px';
                document.body.style.fontFamily = 'Arial, sans-serif';
                document.querySelectorAll('details').forEach(d => (d.open = true));
                document.querySelectorAll('pre, code').forEach(el => {
                  el.style.whiteSpace = 'pre';
                  el.style.overflowX = 'auto';
                  el.style.background = '#f5f5f5';
                  el.style.padding = '10px';
                  el.style.borderRadius = '6px';
                });
                document.querySelectorAll('img').forEach(img => {
                  img.style.maxWidth = '100%';
                  img.style.display = 'block';
                  img.style.margin = '0 auto';
                });
              });

              const pdfPath = path.join(tempDir, `part_${i}.pdf`);
              await page.pdf({
                path: pdfPath,
                format: 'A4',
                printBackground: true,
                preferCSSPageSize: true,
                margin: { top: 10, bottom: 30, left: 10, right: 10 }
              });

              i++;
              bar.update(i);
            }

            await browser.close();
            bar.stop();

            console.log('\nMerging all parts...');
            const mergedPdf = await PDFDocument.create();
            const pdfFiles = fs.readdirSync(tempDir).sort();

            for (const pdfFile of pdfFiles) {
              const doc = await PDFDocument.load(fs.readFileSync(path.join(tempDir, pdfFile)));
              const pages = await mergedPdf.copyPages(doc, doc.getPageIndices());
              pages.forEach(p => mergedPdf.addPage(p));
            }

            fs.writeFileSync(OUTPUT_PDF, await mergedPdf.save());
            console.log(`\n✅ Done! PDF generated: ${OUTPUT_PDF}`);
          })();
          EOF

      - name: Upload PDF
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Full_Offline
          path: NextJS_Full_Offline.pdf