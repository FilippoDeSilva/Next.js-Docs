name: Next.js Docs to Single Styled PDF

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 1'  # Every Monday at 3:00 UTC

jobs:
  export_docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install playwright beautifulsoup4 requests PyPDF2 reportlab
          playwright install

      - name: Generate and Merge PDFs with Bookmarks
        run: |
          mkdir -p pdf_output

          python - <<EOF
          import os, re, asyncio, requests
          from bs4 import BeautifulSoup
          from PyPDF2 import PdfMerger
          from reportlab.lib.pagesizes import A4
          from reportlab.pdfgen import canvas
          from playwright.async_api import async_playwright

          BASE_URL = "https://nextjs.org"
          DOCS_URL = f"{BASE_URL}/docs"
          OUTPUT_DIR = "pdf_output"
          FINAL_PDF = "NextJS_Docs_Complete.pdf"

          def sanitize_filename(url):
              return re.sub(r'[\\\\/*?:"<>|]', '-', url.strip('/').replace('/docs/', ''))

          def get_all_docs_links():
              res = requests.get(DOCS_URL)
              soup = BeautifulSoup(res.text, "html.parser")
              links = set()
              for nav in soup.find_all("nav"):
                  for a in nav.find_all("a", href=True):
                      href = a["href"]
                      if href.startswith("/docs") and "#" not in href:
                          full_url = BASE_URL + href
                          links.add(full_url)
              return sorted(links)

          def create_cover_page(path):
              c = canvas.Canvas(path, pagesize=A4)
              c.setFont("Helvetica-Bold", 28)
              c.drawCentredString(300, 750, "Next.js Documentation")
              c.setFont("Helvetica", 16)
              c.drawCentredString(300, 720, "Generated on GitHub Actions")
              c.drawCentredString(300, 700, "Includes all /docs pages with styling and layout")
              c.showPage()
              c.save()

          async def generate_pdfs():
              os.makedirs(OUTPUT_DIR, exist_ok=True)
              links = get_all_docs_links()
              titles = [link.replace(BASE_URL + "/docs/", "").replace("-", " ").title() or "Index" for link in links]
              merger = PdfMerger()

              cover_path = os.path.join(OUTPUT_DIR, "cover.pdf")
              create_cover_page(cover_path)
              merger.append(cover_path, import_outline=False)

              current_page = len(merger.pages)

              async with async_playwright() as p:
                  browser = await p.chromium.launch()
                  context = await browser.new_context()
                  page = await context.new_page()

                  for url, title in zip(links, titles):
                      filename = sanitize_filename(url)
                      pdf_path = os.path.join(OUTPUT_DIR, f"{filename}.pdf")
                      print(f"üìÑ Rendering {url} ‚Üí {pdf_path}")

                      try:
                          await page.goto(url, wait_until="networkidle", timeout=180000)

                          await page.add_style_tag(content="""
                              [class*="header-module__Pc0Sva__header"],
                              [class*="header-module__Pc0Sva__sticky"],
                              [class*="footer-module__rV1DKq__footer"],
                              [class*="feedback-module__j8fpJW__inlineWrapper"],
                              [class*="feedback-module__j8fpJW__inlineWrapperClosed"],
                              div[class*="sticky"][class*="top-"][class*="md:flex"][class*="md:shrink-0"][class*="md:flex-col"][class*="md:justify-between"] {
                                  display: none !important;
                                  visibility: hidden !important;
                                  height: 0 !important;
                                  overflow: hidden !important;
                              }
                          """)

                          await page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                          await page.wait_for_timeout(1000)

                          await page.emulate_media(media="screen")
                          await page.pdf(
                              path=pdf_path,
                              format="A4",
                              print_background=True,
                              margin={"top": "20mm", "bottom": "20mm", "left": "15mm", "right": "15mm"},
                              prefer_css_page_size=True
                          )

                          merger.append(pdf_path, import_outline=False)
                          merger.add_outline_item(title, current_page)
                          current_page = len(merger.pages)

                          print(f"‚úÖ Saved + bookmarked: {pdf_path}")
                      except Exception as e:
                          print(f"‚ùå Failed: {url} ‚Üí {e}")

                  await browser.close()

              final_path = os.path.join(OUTPUT_DIR, FINAL_PDF)
              merger.write(final_path)
              merger.close()

              os.makedirs("docs", exist_ok=True)
              target_path = os.path.join("docs", FINAL_PDF)
              os.replace(final_path, target_path)
              print(f"‚úÖ Final PDF with bookmarks moved to {target_path}")
          asyncio.run(generate_pdfs())
          EOF

      - name: Commit final PDF to repo
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git pull --rebase
          git add docs/NextJS_Docs_Complete.pdf
          git commit -m "üìö Update Next.js docs archive with cleaned layout and bookmarks" || echo "Nothing to commit"
          git push

      - name: Upload Final PDF as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Docs_Complete
          path: docs/NextJS_Docs_Complete.pdf
