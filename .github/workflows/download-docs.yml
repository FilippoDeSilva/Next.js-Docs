name: Generate Full Next.js Docs PDF with Progress

on:
  workflow_dispatch:

jobs:
  build_pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y httrack
          npm install puppeteer pdf-lib cli-progress

      - name: Mirror Next.js Docs
        run: |
          echo "🌐 Mirroring nextjs.org/docs..."
          mkdir -p docs_mirror

          LOG_FILE=docs_mirror/httrack.log
          > $LOG_FILE

          # Mirror only /docs, non-interactive
          httrack "https://nextjs.org/docs" \
            --path docs_mirror \
            --mirror \
            --robots=0 \
            --stay-on-same-domain \
            "-*" "+https://nextjs.org/docs*" \
            --depth=2 \
            --quiet \
            --sockets=4 \
            --updatehack \
            --assume php,index.html,index.htm \
            --disable-security-limits \
            --keep-alive \
            --continue \
            --verbose \
            --log=$LOG_FILE

          # Detect docs folder
          DOCS_DIR=$(find docs_mirror -type d -name "docs" | head -1)
          if [[ -z "$DOCS_DIR" ]]; then
            echo "❌ Could not find docs folder!"
            exit 1
          fi
          echo "Detected docs folder: $DOCS_DIR"

          # Count HTML pages
          find "$DOCS_DIR" -type f -name '*.html' | sort -u > docs_urls.txt
          TOTAL_PAGES=$(wc -l < docs_urls.txt)
          echo "Found approximately $TOTAL_PAGES pages under /docs/"
          echo "total_pages=$TOTAL_PAGES" >> $GITHUB_OUTPUT
          echo "docs_dir=$DOCS_DIR" >> $GITHUB_OUTPUT

      - name: Generate PDF with Real-Time Progress Bar
        run: |
          node <<'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');
          const { PDFDocument } = require('pdf-lib');
          const cliProgress = require('cli-progress');

          const OUTPUT_PDF = 'NextJS_Full_Offline.pdf';
          const DOCS_DIR = process.env.docs_dir || 'docs_mirror/nextjs.org/docs';

          async function* walk(dir) {
            for (const d of await fs.promises.readdir(dir, { withFileTypes: true })) {
              const fullPath = path.join(dir, d.name);
              if (d.isDirectory()) yield* walk(fullPath);
              else if (d.name.endsWith('.html')) yield fullPath;
            }
          }

          (async () => {
            const browser = await puppeteer.launch({
              headless: "new",
              args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
            });
            const page = await browser.newPage();
            page.setDefaultNavigationTimeout(0);

            const pdfBuffers = [];
            const files = [];
            for await (const filePath of walk(DOCS_DIR)) files.push(filePath);

            console.log(`Rendering ${files.length} pages into PDF...`);

            // Initialize progress bar
            const progressBar = new cliProgress.SingleBar({
              format: 'PDF Rendering |{bar}| {percentage}% || {value}/{total} Pages',
              barCompleteChar: '\u2588',
              barIncompleteChar: '\u2591',
              hideCursor: true
            });
            progressBar.start(files.length, 0);

            for (const [i, filePath] of files.entries()) {
              const url = `file://${path.resolve(filePath)}`;
              await page.goto(url, { waitUntil: 'networkidle2' });

              // Clean up unwanted elements & style
              await page.evaluate(() => {
                document.querySelectorAll('header, footer, nav, aside, [aria-label="Feedback"], [data-testid="docs-rating"]').forEach(el => el.remove());
                document.body.style.background = '#fff';
                document.body.style.color = '#000';
                document.body.style.margin = 'auto';
                document.body.style.maxWidth = '900px';
                document.body.style.fontFamily = 'Arial, sans-serif';
                document.querySelectorAll('details').forEach(d => d.open = true);
                document.querySelectorAll('pre, code').forEach(el => {
                  el.style.whiteSpace = 'pre';
                  el.style.overflowX = 'auto';
                  el.style.background = '#f5f5f5';
                  el.style.padding = '10px';
                  el.style.borderRadius = '6px';
                });
                document.querySelectorAll('img').forEach(img => {
                  img.style.maxWidth = '100%';
                  img.style.display = 'block';
                  img.style.margin = '0 auto';
                });
              });

              const pdfBuffer = await page.pdf({
                format: 'A4',
                printBackground: true,
                preferCSSPageSize: true,
                margin: { top: 10, bottom: 30, left: 10, right: 10 }
              });

              pdfBuffers.push(pdfBuffer);
              progressBar.update(i + 1);
            }

            progressBar.stop();
            await browser.close();

            console.log('Merging PDFs...');
            const mergedPdf = await PDFDocument.create();
            for (const buf of pdfBuffers) {
              const doc = await PDFDocument.load(buf);
              const pages = await mergedPdf.copyPages(doc, doc.getPageIndices());
              pages.forEach(p => mergedPdf.addPage(p));
            }

            const finalBytes = await mergedPdf.save();
            fs.writeFileSync(OUTPUT_PDF, finalBytes);
            console.log('✅ Full Next.js Docs PDF generated:', OUTPUT_PDF);
          })();
          EOF

      - name: Upload PDF
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Full_Offline
          path: NextJS_Full_Offline.pdf