name: 🧭 Next.js Docs PDF (Python Playwright Trial)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install requests playwright PyPDF2
          playwright install chromium

      - name: Write script to file
        run: |
          cat << 'EOF' > generate_docs.py
          import asyncio
          from playwright.async_api import async_playwright
          import requests, re, time
          from PyPDF2 import PdfMerger
          import os

          BASE_URL = "https://nextjs.org/docs"
          HEADERS = {"User-Agent": "Mozilla/5.0"}
          LIMIT = 10

          def get_links():
              print("🔍 Fetching documentation links...")
              html = requests.get(BASE_URL, headers=HEADERS).text
              matches = re.findall(r'href="(/docs/(app|pages)[^"]+)"', html)
              app_links, pages_links = [], []
              for href, group in matches:
                  full = f"https://nextjs.org{href}"
                  if group == "app" and full not in app_links:
                      app_links.append(full)
                  elif group == "pages" and full not in pages_links:
                      pages_links.append(full)
              print(f"📄 Found {len(app_links[:LIMIT])} App and {len(pages_links[:LIMIT])} Pages docs")
              return app_links[:LIMIT], pages_links[:LIMIT]

          async def render_pdf(group, links):
              os.makedirs("pdfs", exist_ok=True)
              pdf_paths = []
              async with async_playwright() as p:
                  browser = await p.chromium.launch()
                  context = await browser.new_context()
                  for i, url in enumerate(links):
                      print(f"\n🌐 ({i+1}/{len(links)}) Navigating to: {url}")
                      page = await context.new_page()
                      start = time.time()
                      await page.goto(url, wait_until="domcontentloaded")
                      await page.wait_for_timeout(3000)
                      print("⏳ Waiting for images to fully load...")
                      await page.evaluate("""() => {
                          return new Promise(resolve => {
                              const checkImages = () => {
                                  const imgs = Array.from(document.images);
                                  const allLoaded = imgs.every(img => img.complete && img.naturalHeight !== 0);
                                  if (allLoaded) resolve();
                                  else setTimeout(checkImages, 500);
                              };
                              checkImages();
                          });
                      }""")
                      print(f"✅ Page fully loaded in {round(time.time() - start, 2)}s")

                      await page.add_style_tag(content="""
                          header, footer, nav, aside, .sidebar, .feedback, .docs-header, .docs-footer,
                          .navigation-container, .version-switcher, .theme-switcher {
                              display: none !important;
                          }
                          .main, .docs-content, .content {
                              margin: 0 auto !important;
                              width: 100% !important;
                          }
                          body {
                              background: white !important;
                              color: black !important;
                          }
                      """)

                      filename = f"pdfs/{group}_{i:02d}.pdf"
                      await page.pdf(path=filename, format="A4", print_background=True)
                      print(f"📦 Saved PDF: {filename}")
                      pdf_paths.append(filename)
                      await page.close()
                  await browser.close()
              return pdf_paths

          def merge_pdfs(paths, output):
              print(f"\n🧩 Merging {len(paths)} PDFs into: {output}")
              merger = PdfMerger()
              for path in paths:
                  print(f"➕ Adding: {path}")
                  merger.append(path)
              merger.write(output)
              merger.close()
              print(f"🎉 Final PDF ready: {output}")

          async def main():
              app_links, pages_links = get_links()
              app_pdfs = await render_pdf("AppRouter", app_links)
              pages_pdfs = await render_pdf("PagesRouter", pages_links)
              merge_pdfs(app_pdfs + pages_pdfs, "NextJS_Trial_10_Docs.pdf")

          asyncio.run(main())
          EOF

      - name: Run PDF generation script
        run: python generate_docs.py

      - name: Upload Trial PDF
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-docs-trial
          path: NextJS_Trial_10_Docs.pdf