name: Build Next.js Docs PDF

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # nightly at midnight UTC

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install markdown2 beautifulsoup4 weasyprint pygments concurrent.futures

      - name: Build HTML & PDF
        env:
          DOCS_PATH: "nextjs-docs/canary_docs"
          OUTPUT_HTML: "pdf-docs/NextJS_Canary_Docs.html"
          OUTPUT_PDF: "pdf-docs/NextJS_Canary_Docs.pdf"
        run: |
          mkdir -p pdf-docs
          python - <<'PYTHON_CODE'
import os, glob, threading, concurrent.futures
import markdown2
from bs4 import BeautifulSoup
from weasyprint import HTML
from pygments import highlight
from pygments.lexers import get_lexer_by_name, TextLexer
from pygments.formatters import HtmlFormatter

DOCS_PATH = os.environ["DOCS_PATH"]
OUTPUT_HTML = os.environ["OUTPUT_HTML"]
OUTPUT_PDF  = os.environ["OUTPUT_PDF"]

html_parts = []
toc = []
lock = threading.Lock()

md_files = sorted(glob.glob(f"{DOCS_PATH}/**/*.md*", recursive=True))
if not md_files:
    print(f"No Markdown/MDX files found in {DOCS_PATH}")
    exit(1)

def process_file(f):
    with open(f, "r", encoding="utf8") as file:
        content = file.read()

    # Convert MD/MDX to HTML
    html = markdown2.markdown(content, extras=["fenced-code-blocks", "tables"])

    # Highlight code blocks
    soup = BeautifulSoup(html, "html.parser")
    for pre in soup.find_all("pre"):
        code = pre.code
        if code and code.string:
            try:
                lexer = get_lexer_by_name(code.get("class", ["text"])[0], stripall=True)
            except:
                lexer = TextLexer(stripall=True)
            highlighted = highlight(code.string, lexer, HtmlFormatter(nowrap=True))
            code.string.replace_with(BeautifulSoup(highlighted, "html.parser"))

    # Extract headers for TOC
    local_toc = []
    for i, header in enumerate(soup.find_all(["h1","h2","h3","h4","h5","h6"])):
        anchor = f"{os.path.basename(f)}-{i}"
        header['id'] = anchor
        local_toc.append((int(header.name[1]), header.text, anchor))

    with lock:
        html_parts.append(str(soup))
        toc.extend(local_toc)

max_workers = min(8, os.cpu_count() or 4)
with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
    executor.map(process_file, md_files)

# Build Table of Contents HTML
toc_html = '<div class="toc"><h2>Table of Contents</h2><ul>'
for level, text, anchor in sorted(toc, key=lambda x: x[2]):
    toc_html += f'<li style="margin-left:{(level-1)*1.5}em"><a href="#{anchor}">{text}</a></li>'
toc_html += '</ul></div>'

# Build final HTML
final_html = f"""
<html>
<head>
<meta charset='utf-8'>
<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github-dark.min.css'>
<style>
body {{ font-family: system-ui, sans-serif; line-height: 1.6; padding: 20px; background: #f7f8fa; color: #24292f; }}
pre {{ background: #eaeef2; padding: 10px; border-radius: 6px; overflow-x: auto; }}
code {{ background: #eaeef2; padding: 2px 4px; border-radius: 4px; font-size: 0.95em; }}
table {{ border-collapse: collapse; width: 100%; }}
th, td {{ border: 1px solid #d1d5da; padding: 6px 12px; }}
th {{ background: #f6f8fa; }}
a {{ color: #0366d6; text-decoration: none; }}
a:hover {{ text-decoration: underline; }}
.toc {{ margin-bottom: 2em; padding: 10px; background: #e1e4e8; border-radius: 6px; }}
.toc ul {{ list-style:none; padding-left:1em; }}
.toc li {{ margin:2px 0; }}
</style>
</head>
<body>
{toc_html}
{"<hr>".join(html_parts)}
</body>
</html>
"""

os.makedirs(os.path.dirname(OUTPUT_HTML), exist_ok=True)
with open(OUTPUT_HTML, "w", encoding="utf8") as f:
    f.write(final_html)

# Convert HTML to PDF
HTML(OUTPUT_HTML).write_pdf(OUTPUT_PDF)
print("âœ… HTML & PDF generated successfully!")
PYTHON_CODE

      - name: Upload HTML & PDF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-docs
          path: |
            pdf-docs/NextJS_Canary_Docs.html
            pdf-docs/NextJS_Canary_Docs.pdf