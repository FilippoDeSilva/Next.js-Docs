name: Next.js Docs Auto-Updater

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:

jobs:
  update_docs:
    runs-on: ubuntu-latest

    env:
      OUTPUT_DIR: ${{ github.workspace }}/nextjs-docs-tmp
      REPO_DOCS_DIR: nextjs-docs
      HASH_FILE: docs_hash.txt
      BASE_BRANCH: main
      THREADS: 5
      AUTO_MERGE: false  # Set true to automatically merge PRs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y httrack curl xmlstarlet parallel
          # GitHub CLI is pre-installed
          gh --version

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Prepare directories
        run: |
          mkdir -p "$OUTPUT_DIR"
          mkdir -p "$REPO_DOCS_DIR"
          touch "$HASH_FILE"

      - name: Fetch Next.js versions (HTML workaround)
        id: fetch_versions
        run: |
          # Scrape versions from the Next.js docs versions dropdown
          VERSIONS=$(curl -s https://nextjs.org/docs/versions | grep -Po '(?<=value=")[^"]+' | grep -v '^$' | tr '\n' ' ')
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT

      - name: Process versions (multithreaded, incremental)
        id: process_versions
        run: |
          export HASH_FILE OUTPUT_DIR REPO_DOCS_DIR THREADS BASE_BRANCH AUTO_MERGE

          for version in ${{ steps.fetch_versions.outputs.versions }}; do
            if [ "$version" == "canary" ]; then
              URL="https://nextjs.org/docs/canary"
            elif [ "$version" == "stable" ]; then
              URL="https://nextjs.org/docs"
            else
              URL="https://nextjs.org/docs/$version"
            fi

            OUT_DIR="$OUTPUT_DIR/$version"
            REPO_DIR="$REPO_DOCS_DIR/$version"
            mkdir -p "$OUT_DIR" "$REPO_DIR"

            echo "Processing version: $version"

            # Download sitemap and extract URLs
            curl -s "$URL/sitemap.xml" > "$OUT_DIR/sitemap.xml"
            URLS=$(xmlstarlet sel -t -v "//url/loc" -n "$OUT_DIR/sitemap.xml")

            VERSION_UPDATED=0
            export URL OUT_DIR REPO_DIR version

            download_page() {
              PAGE_URL="$1"
              REL_PATH=$(echo "$PAGE_URL" | sed "s|$URL||")
              FILE_PATH="$OUT_DIR${REL_PATH}/index.html"
              TMP_FILE="$OUT_DIR/tmp.html"

              OLD_HASH=$(grep "^$version:$REL_PATH=" "$HASH_FILE" | cut -d '=' -f2 || echo "none")

              if [ -f "$FILE_PATH" ]; then
                NEW_HASH=$(md5sum "$FILE_PATH" | cut -d ' ' -f1)
                if [ "$NEW_HASH" == "$OLD_HASH" ]; then
                  return
                fi
              fi

              curl -s "$PAGE_URL" -o "$TMP_FILE"
              NEW_HASH=$(md5sum "$TMP_FILE" | cut -d ' ' -f1)

              if [ "$NEW_HASH" != "$OLD_HASH" ]; then
                mkdir -p "$(dirname "$FILE_PATH")"
                mv "$TMP_FILE" "$FILE_PATH"
                grep -v "^$version:$REL_PATH=" "$HASH_FILE" > "$HASH_FILE.tmp" || true
                echo "$version:$REL_PATH=$NEW_HASH" >> "$HASH_FILE.tmp"
                mv "$HASH_FILE.tmp" "$HASH_FILE"
                echo "UPDATED:$REL_PATH"
              else
                rm "$TMP_FILE"
              fi
            }

            export -f download_page
            echo "$URLS" | parallel -j $THREADS download_page {}

            if grep -q "^$version:" "$HASH_FILE"; then
              VERSION_UPDATED=1
            fi

            if [ "$VERSION_UPDATED" -eq 1 ]; then
              echo "Creating PR for version: $version"

              # Copy updated files
              rm -rf "$REPO_DIR"/*
              cp -r "$OUT_DIR"/* "$REPO_DIR"

              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"

              BRANCH_NAME="update-docs-$version-$(date +'%Y%m%d%H%M%S')"
              git fetch origin $BASE_BRANCH
              git checkout -B "$BRANCH_NAME" origin/$BASE_BRANCH

              git add "$REPO_DIR" "$HASH_FILE"
              git commit -m "Update Next.js Docs ($version) ($(date +'%Y-%m-%d'))" || echo "No changes to commit"
              git push -u origin "$BRANCH_NAME" --force

              # Create PR
              PR_URL=$(gh pr create \
                --title "Update Next.js Docs ($version) ($(date +'%Y-%m-%d'))" \
                --body "This PR updates Next.js docs for version $version." \
                --base "$BASE_BRANCH" \
                --head "$BRANCH_NAME" \
                --draft \
                --json url | jq -r '.url')

              echo "PR created: $PR_URL"

              # Convert draft to ready automatically
              gh pr ready "$PR_URL"

              # Optional auto-merge
              if [ "$AUTO_MERGE" == "true" ]; then
                gh pr merge "$PR_URL" --merge --auto --admin
                echo "PR merged: $PR_URL"
              fi
            fi
          done