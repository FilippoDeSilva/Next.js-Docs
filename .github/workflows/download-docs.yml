name: Build Full Next.js Docs PDF (Multithreaded)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-docs-pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          mkdir -p tmp_project
          cd tmp_project
          npm init -y
          npm install puppeteer pdf-lib axios jsdom p-limit
          cd ../

      - name: Build and merge PDFs (parallel)
        run: |
          mkdir -p pdf-docs

          node -e "
const puppeteer = require('tmp_project/node_modules/puppeteer');
const { PDFDocument } = require('tmp_project/node_modules/pdf-lib');
const fs = require('fs');
const axios = require('tmp_project/node_modules/axios');
const { JSDOM } = require('tmp_project/node_modules/jsdom');
const pLimit = require('tmp_project/node_modules/p-limit');

const BASE_URL = 'https://nextjs.org/docs/canary';
const visited = new Set();
const toVisit = [BASE_URL];

async function crawlDocs(url) {
  if (visited.has(url)) return;
  visited.add(url);
  try {
    const resp = await axios.get(url);
    const dom = new JSDOM(resp.data);
    const links = Array.from(dom.window.document.querySelectorAll('a'))
      .map(a => a.href)
      .filter(h => h.startsWith(BASE_URL) && !visited.has(h));
    toVisit.push(...links);
  } catch(e) { console.error('Failed to fetch', url, e.message); }
}

(async () => {
  console.log('Crawling docs...');
  while (toVisit.length > 0) {
    const url = toVisit.shift();
    await crawlDocs(url);
  }
  const pages = Array.from(visited);
  pages.sort();
  console.log('Found', pages.length, 'pages');

  const browser = await puppeteer.launch({ args:['--no-sandbox','--disable-setuid-sandbox'], timeout:0 });

  // Multithreading limit
  const concurrency = Math.min(require('os').cpus().length, 6); // 6 pages at once
  const limit = pLimit(concurrency);

  const pdfBuffers = await Promise.all(pages.map(url => limit(async () => {
    const page = await browser.newPage();
    await page.goto(url, { waitUntil: 'networkidle0' });
    const slug = url.replace(BASE_URL, '').replace(/\//g,'_') || 'index';
    const pdfPath = 'pdf-docs/' + slug + '.pdf';
    const buffer = await page.pdf({ path: pdfPath, format:'A4', printBackground:true });
    await page.close();
    console.log('Saved PDF:', pdfPath);
    return fs.readFileSync(pdfPath);
  })));

  await browser.close();

  console.log('Merging PDFs...');
  const mergedPdf = await PDFDocument.create();
  for (const buf of pdfBuffers) {
    const pdf = await PDFDocument.load(buf);
    const copiedPages = await mergedPdf.copyPages(pdf, pdf.getPageIndices());
    copiedPages.forEach(p => mergedPdf.addPage(p));
  }
  fs.writeFileSync('pdf-docs/NextJS_Canary_Full.pdf', await mergedPdf.save());
  console.log('Saved merged PDF: pdf-docs/NextJS_Canary_Full.pdf');
})();
          "

      - name: Upload PDF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-docs-pdf
          path: pdf-docs/