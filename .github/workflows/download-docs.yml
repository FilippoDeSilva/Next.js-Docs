name: Generate Full Next.js Docs PDF (HTTrack + Live Progress)

on:
  workflow_dispatch:

jobs:
  build_pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y httrack pv
          npm install puppeteer pdf-lib

      - name: Mirror Next.js Docs with HTTrack (Live Progress)
        run: |
          mkdir -p docs_mirror
          echo "🌐 Starting HTTrack mirror with live progress..."

          # Run HTTrack with detailed logging
          httrack "https://nextjs.org/docs" \
            --path docs_mirror \
            --robots=0 \
            --mirror \
            --ext-depth=3 \
            --keep-alive \
            --sockets=10 \
            --disable-security-limits \
            --max-rate=0 \
            --updatehack \
            --quiet \
            --index \
            --display \
            --verbose \
            -O ./docs_mirror/nextjs.org/docs \
            2>&1 | tee httrack.log &

          pid=$!
          echo "⏳ Mirroring in progress... (live tracking below)"
          echo

          total_pages=0
          total_assets=0

          while kill -0 $pid 2>/dev/null; do
            pages=$(grep -cE "Saving file|Writing HTML file" httrack.log || true)
            assets=$(grep -cE "\.(css|js|png|jpg|jpeg|svg|gif|woff2|ttf)" httrack.log || true)
            total=$((pages + assets))
            percent=$(( (total * 100) / 1500 ))  # assume around 1500 resources max

            # Limit percentage to 100
            if [ $percent -gt 100 ]; then percent=100; fi

            bar=$(printf "%-${percent}s" "#" | tr ' ' '#')
            printf "\rProgress: [%-100s] %d%% | Pages: %d | Assets: %d" "$bar" "$percent" "$pages" "$assets"
            sleep 2
          done

          wait $pid
          echo
          echo "✅ HTTrack completed successfully!"

      - name: Generate Full Docs PDF
        run: |
          node <<'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');
          const { PDFDocument } = require('pdf-lib');

          const OUTPUT_PDF = 'NextJS_Full_Offline.pdf';
          const DOCS_DIR = 'docs_mirror/nextjs.org/docs/';

          async function* walk(dir) {
            for (const d of await fs.promises.readdir(dir, { withFileTypes: true })) {
              const fullPath = path.join(dir, d.name);
              if (d.isDirectory()) yield* walk(fullPath);
              else if (d.name.endsWith('.html')) yield fullPath;
            }
          }

          (async () => {
            const browser = await puppeteer.launch({
              headless: "new",
              args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
            });
            const page = await browser.newPage();
            page.setDefaultNavigationTimeout(0);

            const pdfBuffers = [];
            const files = [];
            for await (const filePath of walk(DOCS_DIR)) files.push(filePath);
            console.log('Rendering', files.length, 'pages...');

            for (const [i, filePath] of files.entries()) {
              console.log(`[${i + 1}/${files.length}] Rendering ${filePath}`);
              const url = `file://${path.resolve(filePath)}`;
              await page.goto(url, { waitUntil: 'networkidle2' });

              await page.evaluate(() => {
                document.querySelectorAll('header, footer, nav, aside').forEach(el => el.remove());
                document.body.style.background = '#fff';
                document.body.style.color = '#000';
                document.body.style.maxWidth = '900px';
                document.body.style.fontFamily = 'Arial, sans-serif';
                document.querySelectorAll('details').forEach(d => (d.open = true));
                document.querySelectorAll('pre, code').forEach(el => {
                  el.style.background = '#f5f5f5';
                  el.style.padding = '10px';
                  el.style.borderRadius = '6px';
                });
                document.querySelectorAll('img').forEach(img => {
                  img.style.maxWidth = '100%';
                  img.style.display = 'block';
                  img.style.margin = '0 auto';
                });
              });

              const pdfBuffer = await page.pdf({
                format: 'A4',
                printBackground: true,
                preferCSSPageSize: true,
                margin: { top: 10, bottom: 30, left: 10, right: 10 }
              });
              pdfBuffers.push(pdfBuffer);
            }

            await browser.close();

            console.log('Merging PDFs...');
            const mergedPdf = await PDFDocument.create();
            for (const buf of pdfBuffers) {
              const doc = await PDFDocument.load(buf);
              const pages = await mergedPdf.copyPages(doc, doc.getPageIndices());
              pages.forEach(p => mergedPdf.addPage(p));
            }

            const finalBytes = await mergedPdf.save();
            fs.writeFileSync(OUTPUT_PDF, finalBytes);
            console.log('✅ Full Next.js Docs PDF generated:', OUTPUT_PDF);
          })();
          EOF

      - name: Upload PDF
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Full_Offline
          path: NextJS_Full_Offline.pdf