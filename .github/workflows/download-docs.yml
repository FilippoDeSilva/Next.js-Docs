name: 📘 Generate Next.js Docs PDF

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # optional: every Sunday midnight
  push:
    branches:
      - main
    paths-ignore:
      - nextjs_docs_complete.pdf
      - pdfs/**

jobs:
  expectopatronum:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 🪄 Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧩 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 🧰 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install playwright requests beautifulsoup4 PyPDF2 tqdm
          playwright install chromium

      - name: ✨ Generate Next.js Docs PDF
        run: |
          python - <<'EOF'
          import os, asyncio, re
          from urllib.parse import urljoin, urlparse
          import requests
          from bs4 import BeautifulSoup
          from tqdm import tqdm
          from PyPDF2 import PdfMerger
          from playwright.async_api import async_playwright

          BASE = "https://nextjs.org/docs"
          OUT_DIR = "pdfs"
          os.makedirs(OUT_DIR, exist_ok=True)

          def discover_docs(start_url):
              seen = set()
              stack = [start_url]
              while stack:
                  url = stack.pop()
                  if url in seen:
                      continue
                  seen.add(url)
                  try:
                      r = requests.get(url, timeout=10)
                      if r.status_code != 200: continue
                      soup = BeautifulSoup(r.text, "html.parser")
                      for a in soup.select("a[href]"):
                          href = a["href"]
                          if href.startswith("#"): continue
                          new = urljoin(BASE, href)
                          if new.startswith(BASE) and new not in seen:
                              stack.append(new)
                  except Exception:
                      pass
              return sorted(seen)

          async def render_page(page, url, out_path):
              try:
                  await page.goto(url, wait_until="networkidle")
                  # remove header/footer/nav/feedback
                  await page.evaluate("""
                      () => {
                          const kill = ['header','footer','nav','.feedback','.navbar','.docs-navigation','.site-footer'];
                          kill.forEach(sel => document.querySelectorAll(sel).forEach(e=>e.remove()));
                          document.body.style.padding = '2em';
                      }
                  """)
                  await page.pdf(
                      path=out_path,
                      format="A4",
                      print_background=True
                  )
              except Exception as e:
                  print(f"❌ Error rendering {url}: {e}")

          async def main():
              print("🔍 Crawling Next.js docs...")
              urls = discover_docs(BASE)
              print(f"📄 Found {len(urls)} pages.")
              async with async_playwright() as p:
                  browser = await p.chromium.launch()
                  page = await browser.new_page()
                  for i, url in enumerate(tqdm(urls, desc="Rendering PDFs")):
                      safe_name = re.sub(r'[^a-zA-Z0-9_-]+', '_', url.replace(BASE, '').strip('/')) or "index"
                      out_path = os.path.join(OUT_DIR, f"{i:04d}_{safe_name}.pdf")
                      await render_page(page, url, out_path)
                  await browser.close()
              print("🧩 Merging all PDFs...")
              merger = PdfMerger()
              for file in sorted(os.listdir(OUT_DIR)):
                  if file.endswith(".pdf"):
                      merger.append(os.path.join(OUT_DIR, file))
              merger.write("nextjs_docs_complete.pdf")
              merger.close()
              print("✅ Done! nextjs_docs_complete.pdf ready.")

          asyncio.run(main())
          EOF

      - name: 📦 Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-docs-pdf
          path: nextjs_docs_complete.pdf

      - name: 💾 Commit PDF to main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add nextjs_docs_complete.pdf
          git commit -m "📘 Auto-generated Next.js Docs PDF"
          git push origin main || echo "⚠️ No changes to commit"