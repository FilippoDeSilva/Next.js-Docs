name: Generate Full Next.js Docs PDF

on:
  workflow_dispatch:

jobs:
  build_pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install puppeteer cheerio axios pdf-lib

      - name: Generate Full Next.js Docs PDF
        run: |
          node <<'EOF'
          const puppeteer = require('puppeteer');
          const axios = require('axios');
          const cheerio = require('cheerio');
          const fs = require('fs');
          const path = require('path');
          const { PDFDocument } = require('pdf-lib');

          const BASE_URL = 'https://nextjs.org/docs';
          const OUTPUT_PDF = 'NextJS_Full_Docs.pdf';

          async function getAllDocLinks() {
            const { data } = await axios.get(BASE_URL);
            const $ = cheerio.load(data);
            const links = new Set();
            $('a[href^="/docs"]').each((_, el) => {
              const href = $(el).attr('href');
              if (href) links.add(new URL(href, BASE_URL).href);
            });
            return Array.from(links);
          }

          (async () => {
            const urls = await getAllDocLinks();
            console.log('Found', urls.length, 'docs pages');

            const browser = await puppeteer.launch({
              headless: "new",
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();
            page.setDefaultNavigationTimeout(0);

            const pdfBuffers = [];

            for (const [i, url] of urls.entries()) {
              console.log(`[${i+1}/${urls.length}] Rendering ${url}`);
              await page.goto(url, { waitUntil: "networkidle2" });

              // Remove unwanted elements & inject styling
              await page.evaluate(() => {
                document.querySelectorAll('header, footer, nav, aside, [aria-label="Feedback"], [data-testid="docs-rating"]').forEach(el => el.remove());
                document.querySelectorAll('details').forEach(d => d.open = true);
              });

              await page.addStyleTag({
                content: `
                  body { margin: auto; max-width: 900px; font-family: Arial, sans-serif; color:#000; }
                  pre, code { white-space: pre !important; overflow-x:auto !important; display:block !important; background:#f5f5f5; padding:10px; border-radius:6px; }
                  img, figure { max-width:100%; display:block; margin:0 auto; }
                `
              });

              const buffer = await page.pdf({
                format: 'A4',
                printBackground: true,
                preferCSSPageSize: true,
                margin: { top:10, bottom:30, left:10, right:10 }
              });

              pdfBuffers.push(buffer);
            }

            await browser.close();

            console.log('Merging PDFs...');
            const mergedPdf = await PDFDocument.create();
            for (const buf of pdfBuffers) {
              const doc = await PDFDocument.load(buf);
              const pages = await mergedPdf.copyPages(doc, doc.getPageIndices());
              pages.forEach(p => mergedPdf.addPage(p));
            }

            const finalBytes = await mergedPdf.save();
            fs.writeFileSync(OUTPUT_PDF, finalBytes);
            console.log('âœ… Full Next.js Docs PDF generated:', OUTPUT_PDF);
          })();
          EOF

      - name: Upload PDF
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Full_Docs
          path: NextJS_Full_Docs.pdf