name: Generate Next.js Docs PDF

on:
  workflow_dispatch:
    inputs:
      timeout:
        description: 'Timeout per page in ms'
        required: false
        default: 60000

jobs:
  build-pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install puppeteer cheerio highlight.js

      - name: Generate Professional Next.js Docs PDF
        run: |
          node <<'JS'
          const fs = require('fs');
          const puppeteer = require('puppeteer');
          const cheerio = require('cheerio');
          const hljs = require('highlight.js');

          const outputFile = 'NextJS_Docs_Professional.pdf';
          const baseUrl = 'https://nextjs.org/docs';
          const timeout = parseInt(process.env.INPUT_TIMEOUT || '60000');

          (async () => {
            const browser = await puppeteer.launch({ headless: true });
            const page = await browser.newPage();

            // Configure viewport
            await page.setViewport({ width: 1440, height: 1024 });

            // Remove left nav, headers, footers, and ads
            await page.evaluateOnNewDocument(() => {
              const observer = new MutationObserver(() => {
                const leftNav = document.querySelector('aside');
                const header = document.querySelector('header');
                const footer = document.querySelector('footer');
                if (leftNav) leftNav.style.display = 'none';
                if (header) header.style.display = 'none';
                if (footer) footer.style.display = 'none';
              });
              observer.observe(document.body, { childList: true, subtree: true });
            });

            // Collect all doc links
            await page.goto(baseUrl, { waitUntil: 'networkidle2', timeout });
            const links = await page.evaluate(() =>
              Array.from(document.querySelectorAll('a')).map(a => a.href).filter(h => h.includes('/docs/app'))
            );

            const pdfPages = [];

            for (const link of links) {
              try {
                await page.goto(link, { waitUntil: 'networkidle2', timeout });

                // Wait extra time for images/code to render
                await page.waitForTimeout(2000);

                const content = await page.content();
                const $ = cheerio.load(content);

                // Highlight code blocks
                $('pre code').each((i, block) => {
                  const code = $(block).text();
                  let langClass = $(block).attr('class') || '';
                  let lang = 'plaintext'; // fallback

                  const match = langClass.match(/language-(\w+)/);
                  if (match) lang = match[1];

                  try {
                    const highlighted = hljs.highlight(code, { language: lang }).value;
                    $(block).html(highlighted);
                  } catch {
                    const safeHighlighted = hljs.highlight(code, { language: 'plaintext' }).value;
                    $(block).html(safeHighlighted);
                    console.warn(`Unknown language "${langClass}", defaulted to plaintext`);
                  }

                  // Make long code scrollable
                  $(block).css({
                    'overflow-x': 'auto',
                    'display': 'block',
                    'white-space': 'pre'
                  });
                });

                // Center content
                $('main').css({
                  'margin': '0 auto',
                  'max-width': '900px'
                });

                // Preserve dark background (optional)
                $('body').css({
                  'background-color': '#ffffff',
                  'color': '#000000'
                });

                pdfPages.push($.html());
                console.log(`Added ${link} to PDF`);
              } catch (err) {
                console.warn(`Error fetching ${link}:`, err.message);
              }
            }

            // Create a new page to compile all HTML
            const pdfPage = await browser.newPage();
            await pdfPage.setContent(pdfPages.join('<div style="page-break-after: always;"></div>'), { waitUntil: 'networkidle2' });

            // Generate PDF
            await pdfPage.pdf({
              path: outputFile,
              format: 'A4',
              printBackground: true,
              margin: { top: '20px', bottom: '20px', left: '20px', right: '20px' }
            });

            await browser.close();
            console.log(`Professional PDF generated: ${outputFile}`);
          })();
          JS

      - name: Commit & Push PDF
        run: |
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git add NextJS_Docs_Professional.pdf
          git commit -m "Update Professional Next.js Docs PDF" || echo "No changes"
          git push origin main || echo "Push failed"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Docs_Professional
          path: NextJS_Docs_Professional.pdf