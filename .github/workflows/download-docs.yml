name: ðŸ§­ Next.js Docs PDF (Puppeteer Trial)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install puppeteer pdf-lib

      - name: Generate Trial PDF with Puppeteer
        run: |
          node <<'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const { PDFDocument } = require('pdf-lib');

          const BASE_URL = 'https://nextjs.org/docs';
          const HEADERS = { 'User-Agent': 'Mozilla/5.0' };
          const LIMIT = 10;

          async function getLinks() {
            const res = await fetch(BASE_URL, { headers: HEADERS });
            const html = await res.text();
            const matches = [...html.matchAll(/href="(\/docs\/(app|pages)[^"]+)"/g)];
            const appLinks = [];
            const pagesLinks = [];

            for (const [, href] of matches) {
              const full = `https://nextjs.org${href}`;
              if (href.startsWith('/docs/app/') && !appLinks.includes(full)) appLinks.push(full);
              if (href.startsWith('/docs/pages/') && !pagesLinks.includes(full)) pagesLinks.push(full);
            }

            return {
              app: appLinks.slice(0, LIMIT),
              pages: pagesLinks.slice(0, LIMIT),
            };
          }

          async function renderPDFs(group, links) {
            const browser = await puppeteer.launch({ headless: 'new' });
            const pdfPaths = [];

            for (let i = 0; i < links.length; i++) {
              const url = links[i];
              const page = await browser.newPage();
              await page.goto(url, { waitUntil: 'networkidle2' });
              const filename = `${group}_${i.toString().padStart(2, '0')}.pdf`;
              await page.pdf({
                path: filename,
                format: 'A4',
                printBackground: true,
                margin: { top: '1cm', bottom: '1cm', left: '1cm', right: '1cm' },
              });
              console.log(`âœ… Rendered ${filename}`);
              pdfPaths.push(filename);
              await page.close();
            }

            await browser.close();
            return pdfPaths;
          }

          async function mergePDFs(files, output) {
            const merged = await PDFDocument.create();
            for (const file of files) {
              const pdfBytes = fs.readFileSync(file);
              const doc = await PDFDocument.load(pdfBytes);
              const pages = await merged.copyPages(doc, doc.getPageIndices());
              pages.forEach(p => merged.addPage(p));
            }
            const finalBytes = await merged.save();
            fs.writeFileSync(output, finalBytes);
            console.log(`ðŸŽ‰ Merged into ${output}`);
          }

          (async () => {
            const links = await getLinks();
            console.log(`ðŸ“„ Found ${links.app.length} App and ${links.pages.length} Pages docs`);

            const appPDFs = await renderPDFs('AppRouter', links.app);
            const pagesPDFs = await renderPDFs('PagesRouter', links.pages);

            await mergePDFs([...appPDFs, ...pagesPDFs], 'NextJS_Trial_10_Docs.pdf');
          })();
          EOF

      - name: Upload Trial PDF
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-docs-trial
          path: NextJS_Trial_10_Docs.pdf