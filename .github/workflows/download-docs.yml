name: Build Next.js Docs PDF

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Puppeteer + PDF tools
        run: npm install puppeteer pdf-lib

      - name: Generate Styled PDF (Single-threaded)
        run: |
          node <<'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');
          const { PDFDocument } = require('pdf-lib');

          (async () => {
            const browser = await puppeteer.launch({
              headless: "new",
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();

            const urls = [
              "https://nextjs.org/docs/app",
              "https://nextjs.org/docs/pages",
              "https://nextjs.org/docs/14/community/contribution-guide"
            ];

            const pdfs = [];

            for (const [i, url] of urls.entries()) {
              console.log(`[${i}] Rendering ${url}`);
              await page.goto(url, { waitUntil: "networkidle2", timeout: 0 });

              // Inject CSS for styling and scrolling code blocks
              await page.addStyleTag({
                content: `
                  pre, code {
                    white-space: pre !important;
                    overflow-x: auto !important;
                    max-width: 100% !important;
                    display: block !important;
                    background: #f5f5f5 !important;
                    border-radius: 6px !important;
                    padding: 10px !important;
                  }
                  body {
                    background: #fff !important;
                    color: #000 !important;
                    margin: auto !important;
                    max-width: 900px !important;
                    font-family: Arial, sans-serif !important;
                  }
                `
              });

              // Remove nav/sidebar/header/footer/dark mode/rating
              await page.evaluate(() => {
                document.querySelectorAll('header, footer, nav, [data-testid="docs-rating"], [data-theme="dark"]').forEach(el => el.remove());
              });

              const pdfPath = path.resolve(`part-${i}.pdf`);
              await page.pdf({
                path: pdfPath,
                format: "A4",
                printBackground: true,
                preferCSSPageSize: true
              });
              pdfs.push(pdfPath);
            }

            await browser.close();

            // Merge PDFs sequentially
            const merged = await PDFDocument.create();
            for (const pdfPath of pdfs) {
              const data = fs.readFileSync(pdfPath);
              const doc = await PDFDocument.load(data);
              const copiedPages = await merged.copyPages(doc, doc.getPageIndices());
              copiedPages.forEach((p) => merged.addPage(p));
            }

            const outBytes = await merged.save();
            fs.writeFileSync("NextJS_Docs_Styled.pdf", outBytes);
            console.log("âœ… PDF generated successfully: NextJS_Docs_Styled.pdf");
          })();
          EOF

      - name: Upload PDF
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Docs_Styled
          path: NextJS_Docs_Styled.pdf