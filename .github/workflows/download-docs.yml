name: Export Next.js Docs to PDF

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install puppeteer@21 pdf-lib

      - name: Generate Optimized Styled PDF
        run: |
          node <<'EOF'
          const puppeteer = require("puppeteer");
          const { PDFDocument } = require("pdf-lib");
          const fs = require("fs");

          async function generate() {
            const browser = await puppeteer.launch({
              headless: "new",
              args: ["--no-sandbox", "--disable-setuid-sandbox"]
            });

            const urls = [
              "https://nextjs.org/docs/app",
              "https://nextjs.org/docs/pages",
              "https://nextjs.org/docs/14/community/contribution-guide"
            ];

            const pdfBuffers = await Promise.all(
              urls.map(async (url, i) => {
                const page = await browser.newPage();
                console.log(`âš¡ Loading ${url}...`);
                await page.goto(url, { waitUntil: "networkidle2", timeout: 60000 });

                // Wait until fonts & images are fully loaded
                await page.evaluateHandle("document.fonts.ready");
                await page.evaluate(async () => {
                  const selectors = Array.from(document.images).map(img => {
                    if (img.complete) return;
                    return new Promise(resolve => { img.onload = img.onerror = resolve; });
                  });
                  await Promise.all(selectors);
                });

                // Cleanup unwanted elements
                await page.evaluate(() => {
                  ["aside", "header", "footer"].forEach(sel => {
                    const el = document.querySelector(sel);
                    if (el) el.remove();
                  });
                  // Remove "Was this helpful?"
                  document.querySelectorAll("div,section").forEach(el => {
                    if (el.innerText?.includes("Was this helpful")) el.remove();
                  });

                  // Force light mode
                  document.body.classList.remove("dark");
                  document.body.style.background = "#fff";

                  // Center main content
                  const main = document.querySelector("main");
                  if (main) {
                    main.style.margin = "0 auto";
                    main.style.maxWidth = "900px";
                  }
                });

                const pdf = await page.pdf({
                  format: "A4",
                  printBackground: true,
                  margin: { top: "20mm", bottom: "20mm", left: "15mm", right: "15mm" }
                });

                await page.close();
                console.log(`âœ… Done: ${url}`);
                return pdf;
              })
            );

            await browser.close();

            // Merge PDFs into one
            const merged = await PDFDocument.create();
            for (const buffer of pdfBuffers) {
              const pdf = await PDFDocument.load(buffer);
              const pages = await merged.copyPages(pdf, pdf.getPageIndices());
              pages.forEach(p => merged.addPage(p));
            }

            const outBytes = await merged.save();
            fs.writeFileSync("NextJS_Docs_Styled.pdf", outBytes);
            console.log("ðŸŽ‰ Final PDF created: NextJS_Docs_Styled.pdf");
          }

          generate().catch(err => {
            console.error("Error:", err);
            process.exit(1);
          });
          EOF

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Docs_Styled
          path: NextJS_Docs_Styled.pdf