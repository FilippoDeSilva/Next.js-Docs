name: 🧭 Next.js Docs PDF

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4 weasyprint PyPDF2

      - name: Fetch Docs and Generate PDF
        run: |
          python - <<'EOF'
          import requests, sys, os
          from bs4 import BeautifulSoup
          from weasyprint import HTML, CSS
          from PyPDF2 import PdfMerger

          BASE_URL = "https://nextjs.org/docs"
          HEADERS = {"User-Agent": "Mozilla/5.0"}
          CHUNK_SIZE = 50

          def flush(msg):
              print(msg)
              sys.stdout.flush()

          def get_links():
              html = requests.get(BASE_URL, headers=HEADERS).text
              soup = BeautifulSoup(html, "html.parser")
              app_links, pages_links = [], []

              for a in soup.find_all("a", href=True):
                  href = a["href"]
                  if href.startswith("/docs/") and not any(href.startswith(f"/docs/{v}/") for v in ["13", "14"]):
                      full = f"https://nextjs.org{href}"
                      if "/docs/app/" in href:
                          if full not in app_links:
                              app_links.append(full)
                      elif "/docs/pages/" in href:
                          if full not in pages_links:
                              pages_links.append(full)
              return app_links, pages_links

          def fetch_html(url):
              try:
                  return requests.get(url, headers=HEADERS, timeout=10).text
              except Exception as e:
                  flush(f"❌ Failed {url}: {e}")
                  return ""

          def render_group(name, links):
              flush(f"📚 Rendering group: {name} with {len(links)} pages")
              chunk_pages = []
              chunk_index = 0
              filenames = []

              for i, link in enumerate(links, 1):
                  flush(f"({i}/{len(links)}) Fetching {link}")
                  html = fetch_html(link)
                  chunk_pages.append(html)

                  if i % CHUNK_SIZE == 0 or i == len(links):
                      html_block = f"<h1>{name} Docs</h1><hr>" + "<hr>".join(chunk_pages)
                      css = CSS(string="""
                          @page { margin: 1cm; }
                          body { font-family: Arial, sans-serif; color: #222; }
                      """)
                      filename = f"{name}_chunk_{chunk_index:02d}.pdf"
                      flush(f"🧾 Rendering {filename}...")
                      HTML(string=html_block, base_url=BASE_URL).write_pdf(filename, stylesheets=[css])
                      flush(f"✅ Finished {filename}")
                      filenames.append(filename)
                      chunk_pages = []
                      chunk_index += 1

              return filenames

          app_links, pages_links = get_links()
          flush(f"📄 Found {len(app_links)} App pages and {len(pages_links)} Pages pages.")

          app_files = render_group("AppRouter", app_links)
          pages_files = render_group("PagesRouter", pages_links)

          flush("🧩 Merging all chunks...")
          merger = PdfMerger()
          for f in app_files + pages_files:
              merger.append(f)
          merger.write("NextJS_Latest_Docs.pdf")
          merger.close()
          flush("🎉 Final PDF ready!")
          EOF

      - name: Upload Final PDF
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-docs-latest
          path: NextJS_Latest_Docs.pdf
