name: Generate Full Next.js Docs PDF (HTTrack Optimized Fast)

on:
  workflow_dispatch:

jobs:
  build_pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y httrack
          npm install puppeteer pdf-lib

      - name: Mirror Next.js Docs (Slim Version)
        run: |
          mkdir -p docs_mirror
          httrack "https://nextjs.org/docs" \
            --path docs_mirror \
            --robots=0 \
            --depth=2 \
            --near \
            --mirror \
            --keep-alive \
            --sockets=8 \
            --disable-security-limits \
            --max-rate=0 \
            --quiet

      - name: Generate Optimized Full Docs PDF
        run: |
          node <<'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');
          const { PDFDocument } = require('pdf-lib');

          const OUTPUT_PDF = 'NextJS_Full_Offline.pdf';
          const DOCS_DIR = 'docs_mirror/nextjs.org/docs/';

          async function* walk(dir) {
            for (const d of await fs.promises.readdir(dir, { withFileTypes: true })) {
              const fullPath = path.join(dir, d.name);
              if (d.isDirectory()) yield* walk(fullPath);
              else if (d.name.endsWith('.html')) yield fullPath;
            }
          }

          (async () => {
            const browser = await puppeteer.launch({
              headless: "new",
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--blink-settings=imagesEnabled=true'
              ]
            });
            const page = await browser.newPage();
            page.setDefaultNavigationTimeout(0);

            const tempDir = 'pdf_parts';
            fs.mkdirSync(tempDir, { recursive: true });

            const files = [];
            for await (const f of walk(DOCS_DIR)) files.push(f);

            console.log('Rendering', files.length, 'pages...');

            for (const [i, filePath] of files.entries()) {
              console.log(`[${i + 1}/${files.length}] ${filePath}`);
              const url = `file://${path.resolve(filePath)}`;
              await page.goto(url, { waitUntil: 'networkidle2' });

              await page.evaluate(() => {
                // Remove non-essential elements
                document.querySelectorAll('header, footer, nav, aside, [aria-label="Feedback"], [data-testid="docs-rating"]').forEach(el => el.remove());
                // Make sure dark mode doesn't ruin the PDF
                document.body.style.background = '#fff';
                document.body.style.color = '#000';
                document.querySelectorAll('details').forEach(d => (d.open = true));
                document.querySelectorAll('img').forEach(img => img.loading = 'eager');
              });

              const partPath = path.join(tempDir, `part_${i}.pdf`);
              await page.pdf({
                path: partPath,
                format: 'A4',
                printBackground: true,
                preferCSSPageSize: true,
                margin: { top: 10, bottom: 30, left: 10, right: 10 }
              });
            }

            await browser.close();

            console.log('Merging PDFs...');
            const mergedPdf = await PDFDocument.create();
            const pdfFiles = fs.readdirSync(tempDir).sort();

            for (const pdfFile of pdfFiles) {
              const doc = await PDFDocument.load(fs.readFileSync(path.join(tempDir, pdfFile)));
              const pages = await mergedPdf.copyPages(doc, doc.getPageIndices());
              pages.forEach(p => mergedPdf.addPage(p));
            }

            const finalBytes = await mergedPdf.save();
            fs.writeFileSync(OUTPUT_PDF, finalBytes);
            console.log('âœ… Done:', OUTPUT_PDF);
          })();
          EOF

      - name: Upload PDF
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Full_Offline
          path: NextJS_Full_Offline.pdf