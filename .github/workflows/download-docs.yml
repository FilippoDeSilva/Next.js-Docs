name: üß≠ Next.js Docs to PDF

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *" # runs daily at 6 AM UTC

jobs:
  scrape-and-build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: üßπ Checkout repo
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: üß∞ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install playwright aiohttp beautifulsoup4 requests fpdf2
          playwright install chromium

      - name: üßô‚Äç‚ôÇÔ∏è Run Expecto Patronum (Next.js Docs Magic)
        run: |
          cat > nextjs_docs.py <<'PYCODE'
          import asyncio, os, re, requests
          from bs4 import BeautifulSoup
          from fpdf import FPDF
          from playwright.async_api import async_playwright

          async def get_latest_docs_url(page):
              await page.goto("https://nextjs.org/docs", wait_until="domcontentloaded")
              element = await page.wait_for_selector("a[href*='/docs/app']", timeout=60000)
              href = await element.get_attribute("href")
              if not href.startswith("https"):
                  href = f"https://nextjs.org{href}"
              return href

          async def get_sidebar_links(page, base_url):
              await page.goto(base_url, wait_until="domcontentloaded")
              sidebar_links = await page.eval_on_selector_all(
                  "a[href*='/docs/app']",
                  "els => els.map(e => e.href)"
              )
              filtered = [link for link in sidebar_links if "/docs/app/" in link and not any(x in link for x in ["#","feedback"])]
              return list(dict.fromkeys(filtered))  # remove duplicates

          async def scrape_docs(page, links):
              pages = []
              for url in links:
                  print(f"üìò Scraping {url}")
                  await page.goto(url, wait_until="networkidle")
                  await page.evaluate("""() => {
                      document.querySelectorAll('.feedback-module__j8fpJW__inlineWrapper').forEach(e => e.remove());
                  }""")
                  html = await page.content()
                  soup = BeautifulSoup(html, "html.parser")
                  main = soup.find("main")
                  if main:
                      text = main.get_text(separator="\n", strip=True)
                      title = soup.title.string if soup.title else url
                      pages.append((title, text))
              return pages

          def save_pdf(pages):
              pdf = FPDF()
              pdf.set_auto_page_break(auto=True, margin=15)
              pdf.set_font("Helvetica", size=12)
              for title, text in pages:
                  pdf.add_page()
                  pdf.set_font("Helvetica", "B", 16)
                  pdf.cell(0, 10, title, ln=True)
                  pdf.ln(8)
                  pdf.set_font("Helvetica", size=12)
                  pdf.multi_cell(0, 8, text)
              pdf.output("NextJS_Latest_Docs.pdf")
              print("‚úÖ PDF created: NextJS_Latest_Docs.pdf")

          async def main():
              async with async_playwright() as p:
                  browser = await p.chromium.launch(headless=True)
                  page = await browser.new_page()
                  print("üß≠ Detecting latest docs...")
                  latest_docs_url = await get_latest_docs_url(page)
                  print(f"üåê Latest docs: {latest_docs_url}")
                  links = await get_sidebar_links(page, latest_docs_url)
                  print(f"üîó Found {len(links)} docs pages.")
                  pages = await scrape_docs(page, links)
                  save_pdf(pages)
                  await browser.close()

          if __name__ == "__main__":
              asyncio.run(main())
          PYCODE

          python nextjs_docs.py

      - name: üì¶ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-latest-docs
          path: NextJS_Latest_Docs.pdf

      - name: üíæ Commit & Push PDF
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          mv NextJS_Latest_Docs.pdf docs.pdf
          git add docs.pdf
          git commit -m "üß≠ Update Next.js Docs PDF (Auto)"
          git push
