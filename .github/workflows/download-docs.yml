name: üìò Next.js Docs to PDF

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"  # Weekly update

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: üßô Clone repo
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: üì¶ Install deps
        run: |
          pip install playwright tqdm PyPDF2
          playwright install chromium

      - name: ‚ú® Generate Next.js Docs PDF
        run: |
          python - <<'EOF'
          import asyncio, os, re, json
          from playwright.async_api import async_playwright
          from tqdm import tqdm

          # Use specific version
          DOCS_VERSION = "15.5.4"
          BASE_URL = f"https://nextjs.org/docs/{DOCS_VERSION}"
          os.makedirs("nextjs-docs", exist_ok=True)

          # CSS selectors for elements to remove
          REMOVE_SELECTORS = [
              'header', 
              'footer',
              'nav', 
              'aside',
              '.docs-sidebar',
              '.docs-toc',
              '.feedback',
              '.pagination-nav',
              '.theme-doc-breadcrumbs',
              '.theme-edit-this-page',
              '.theme-last-updated',
              '.theme-doc-toc-desktop',
              '.theme-doc-toc-mobile',
              '.breadcrumbs',
              '.search-box',
              'div[class*="feedback-module"]',
              'div[class*="md:flex"][class*="flex-col"][class*="justify-between"]',
              'button[aria-label="Toggle navigation"]',
              'button[class*="navbar__toggle"]'
          ]

          async def get_all_links(page):
              print(f"Fetching documentation links from {BASE_URL}...")
              await page.goto(BASE_URL, wait_until="networkidle")
              
              # Wait for the main content to load
              await page.wait_for_selector('article', timeout=60000)
              
              # Get all documentation links
              links = await page.eval_on_selector_all(
                  'a[href^="/docs"]',
                  'els => els.map(e => e.href)'
              )
              
              # Process links: deduplicate, filter version, and ensure full URLs
              processed_links = set()
              for link in links:
                  # Convert to full URL if relative
                  if link.startswith('/'):
                      link = f"https://nextjs.org{link}"
                  # Filter for the specific version
                  if f"/docs/{DOCS_VERSION}/" in link and "#" not in link:
                      processed_links.add(link)
              
              # Always include the main page
              processed_links.add(BASE_URL)
              
              print(f"Found {len(processed_links)} documentation pages")
              return sorted(processed_links)

          async def clean_page(page):
              # Remove unwanted elements
              for selector in REMOVE_SELECTORS:
                  await page.evaluate(f"""
                      document.querySelectorAll('{selector}').forEach(el => el.remove());
                  """)
              
              # Add some basic styling
              await page.add_style_tag(content="""
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                      line-height: 1.6;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                      color: #1a1a1a;
                  }
                  h1 { font-size: 2em; margin-bottom: 0.5em; }
                  h2 { font-size: 1.5em; margin: 1.5em 0 0.5em; }
                  pre {
                      background: #f6f8fa;
                      padding: 16px;
                      border-radius: 6px;
                      overflow: auto;
                      font-size: 14px;
                      line-height: 1.45;
                  }
                  code {
                      font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
                      background: rgba(175, 184, 193, 0.2);
                      padding: 0.2em 0.4em;
                      border-radius: 3px;
                      font-size: 85%;
                  }
                  img { max-width: 100%; height: auto; }
                  a { color: #0366d6; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              """)

          async def render_page(browser, url, idx):
              page = await browser.new_page()
              try:
                  print(f"Rendering: {url}")
                  await page.goto(url, wait_until="networkidle", timeout=60000)
                  await clean_page(page)
                  
                  # Get a clean filename from the URL
                  filename = url.replace(f"https://nextjs.org/docs/{DOCS_VERSION}/", "").replace("/", "-")
                  if not filename or filename == f"docs-{DOCS_VERSION}":
                      filename = "index"
                  out_path = f"nextjs-docs/{idx:03d}-{filename}.pdf"
                  
                  # Generate PDF with better formatting
                  await page.pdf(
                      path=out_path,
                      format="A4",
                      print_background=True,
                      margin={"top": "20mm", "right": "20mm", "bottom": "20mm", "left": "20mm"}
                  )
                  print(f"Saved: {out_path}")
                  return out_path
              except Exception as e:
                  print(f"Error rendering {url}: {e}")
                  return None
              finally:
                  await page.close()

          async def main():
              async with async_playwright() as pw:
                  # Launch browser with better defaults
                  browser = await pw.chromium.launch(
                      headless=True,
                      args=['--no-sandbox', '--disable-setuid-sandbox']
                  )
                  
                  page = await browser.new_page()
                  links = await get_all_links(page)
                  await page.close()
                  
                  print(f"Starting to render {len(links)} pages...")
                  rendered_files = []
                  
                  for i, link in enumerate(tqdm(links, desc="Rendering PDFs")):
                      file_path = await render_page(browser, link, i)
                      if file_path:
                          rendered_files.append(file_path)
                  
                  print(f"Successfully rendered {len(rendered_files)}/{len(links)} pages")
                  return rendered_files

          if __name__ == "__main__":
              rendered_files = asyncio.run(main())
              with open("rendered_files.json", "w") as f:
                  json.dump(rendered_files, f)
          EOF

      - name: üìö Merge PDFs into One
        run: |
          python - <<'EOF'
          import json
          from PyPDF2 import PdfMerger
          import os

          print("Merging PDFs...")
          merger = PdfMerger()
          
          # Load the list of successfully rendered files
          try:
              with open("rendered_files.json", "r") as f:
                  files_to_merge = json.load(f)
              
              # Sort files to maintain order
              files_to_merge.sort()
              
              # Add each PDF to the merger
              for pdf_file in files_to_merge:
                  if os.path.exists(pdf_file):
                      print(f"Adding to PDF: {pdf_file}")
                      merger.append(pdf_file)
                  else:
                      print(f"Warning: File not found: {pdf_file}")
              
              # Write the merged PDF
              output_file = f"Nextjs-Docs-15.5.4.pdf"
              merger.write(output_file)
              merger.close()
              print(f"Successfully created {output_file}")
              
          except Exception as e:
              print(f"Error merging PDFs: {e}")
              raise
          EOF

      - name: üì§ Upload as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-docs-15.5.4
          path: Nextjs-Docs-15.5.4.pdf

      - name: üíæ Commit to main branch
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          cp Nextjs-Docs-15.5.4.pdf .
          git add Nextjs-Docs-15.5.4.pdf
          git commit -m "üìò Auto-update Next.js 15.5.4 Docs PDF"
          git push origin main || echo "No changes to commit"
