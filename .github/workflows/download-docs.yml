name: Next.js Docs to PDF

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 1'  # Every Monday at 3:00 UTC

jobs:
  export_docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install playwright beautifulsoup4 requests
          playwright install

      - name: Generate PDFs from Next.js Docs
        run: |
          mkdir -p pdf_output

          python - <<EOF
          import os, re, asyncio, requests
          from bs4 import BeautifulSoup
          from playwright.async_api import async_playwright

          BASE_URL = "https://nextjs.org"
          DOCS_URL = f"{BASE_URL}/docs"
          OUTPUT_DIR = "pdf_output"

          def sanitize_filename(url):
              return re.sub(r'[\\\\/*?:"<>|]', '-', url.strip('/').replace('/docs/', ''))

          def get_docs_links():
              res = requests.get(DOCS_URL)
              soup = BeautifulSoup(res.text, "html.parser")
              links = set()
              for a in soup.find_all("a", href=True):
                  href = a["href"]
                  if href.startswith("/docs") and not href.startswith("/docs/tag") and "#" not in href:
                      links.add(BASE_URL + href)
              return sorted(links)

          async def generate_pdfs():
              os.makedirs(OUTPUT_DIR, exist_ok=True)
              links = get_docs_links()

              async with async_playwright() as p:
                  browser = await p.chromium.launch()
                  page = await browser.new_page()

                  for url in links:
                      filename = sanitize_filename(url)
                      pdf_path = os.path.join(OUTPUT_DIR, f"{filename}.pdf")
                      print(f"üìÑ Rendering {url} ‚Üí {pdf_path}")

                      try:
                          await page.goto(url, wait_until="networkidle")
                          await page.pdf(
                              path=pdf_path,
                              format="A4",
                              print_background=True,
                              margin={"top": "20mm", "bottom": "20mm", "left": "15mm", "right": "15mm"}
                          )
                          print(f"‚úÖ Saved: {pdf_path}")
                      except Exception as e:
                          print(f"‚ùå Failed: {url} ‚Üí {e}")

                  await browser.close()

          asyncio.run(generate_pdfs())
          EOF

      - name: Upload PDFs
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Docs_PDFs
          path: pdf_output/