name: Smart Next.js Docs Mirror + Versioned PDF

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 1'  # Every Monday at 3:00 UTC

jobs:
  generate_docs_pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Puppeteer and dependencies
        run: |
          npm init -y
          npm install puppeteer node-fetch@2 mkdirp

      - name: Generate PDFs from Next.js Docs
        run: |
          node -e "
          const puppeteer = require('puppeteer');
          const fetch = require('node-fetch');
          const fs = require('fs');
          const path = require('path');
          const mkdirp = require('mkdirp');

          (async () => {
            const versions = [
              { name: 'stable', url: 'https://nextjs.org/docs' },
              { name: 'canary', url: 'https://nextjs.org/docs/canary' }
            ];

            const browser = await puppeteer.launch({ headless: 'new' });
            const page = await browser.newPage();
            mkdirp.sync('pdf_output');

            for (const { name, url } of versions) {
              console.log('📄 Generating PDF for ' + name + ' docs...');
              const links = await getDocLinks(url);
              const versionDir = path.join('pdf_output', name);
              mkdirp.sync(versionDir);

              for (const link of links) {
                const filename = sanitizeFilename(link.replace(url, '')) || 'index';
                const pdfPath = path.join(versionDir, filename + '.pdf');

                try {
                  await page.goto(link, { waitUntil: 'networkidle2' });
                  await page.pdf({ path: pdfPath, format: 'A4' });
                  console.log('✅ Saved: ' + pdfPath);
                } catch (err) {
                  console.warn('❌ Failed to render ' + link + ': ' + err.message);
                }
              }
            }

            await browser.close();

            async function getDocLinks(baseUrl) {
              const res = await fetch(baseUrl);
              const html = await res.text();
              const matches = [...html.matchAll(/href=\\"(\\/docs[^\\"#]+)\\"/g)];
              const uniqueLinks = Array.from(new Set(matches.map(m => baseUrl + m[1])));
              return uniqueLinks;
            }

            function sanitizeFilename(str) {
              return str.replace(/[\\\\/\\\\?%*:|\\\\"<>]/g, '-').replace(/^-+|-+$/g, '');
            }
          })();
        "

      - name: Upload PDFs
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Docs_PDFs
          path: pdf_output/