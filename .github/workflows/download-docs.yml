name: 🧭 Next.js Docs PDF (Trial with Highlighting)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4 weasyprint PyPDF2 pygments

      - name: Fetch First 10 Docs and Generate PDF
        run: |
          python - <<'EOF'
          import requests, sys
          from bs4 import BeautifulSoup
          from weasyprint import HTML, CSS
          from PyPDF2 import PdfMerger
          from pygments import highlight
          from pygments.lexers import guess_lexer, TextLexer
          from pygments.formatters import HtmlFormatter

          BASE_URL = "https://nextjs.org/docs"
          HEADERS = {"User-Agent": "Mozilla/5.0"}
          LIMIT = 10  # only fetch first 10 pages per group

          def flush(msg):
              print(msg)
              sys.stdout.flush()

          def get_links():
              html = requests.get(BASE_URL, headers=HEADERS).text
              soup = BeautifulSoup(html, "html.parser")
              app_links, pages_links = [], []
              for a in soup.find_all("a", href=True):
                  href = a["href"]
                  if href.startswith("/docs/") and not any(href.startswith(f"/docs/{v}/") for v in ["13", "14"]):
                      full = f"https://nextjs.org{href}"
                      if "/docs/app/" in href and full not in app_links:
                          app_links.append(full)
                      elif "/docs/pages/" in href and full not in pages_links:
                          pages_links.append(full)
              return app_links[:LIMIT], pages_links[:LIMIT]

          def fetch_and_highlight(url):
              try:
                  html = requests.get(url, headers=HEADERS, timeout=10).text
                  soup = BeautifulSoup(html, "html.parser")

                  # Highlight code blocks
                  for pre in soup.find_all("pre"):
                      code = pre.get_text()
                      try:
                          lexer = guess_lexer(code)
                      except Exception:
                          lexer = TextLexer()
                      formatter = HtmlFormatter(nowrap=False)
                      highlighted = highlight(code, lexer, formatter)
                      pre.clear()
                      pre.append(BeautifulSoup(highlighted, "html.parser"))

                  return str(soup)
              except Exception as e:
                  flush(f"❌ Failed {url}: {e}")
                  return ""

          def render_group(name, links):
              flush(f"📚 Rendering group: {name} with {len(links)} pages")
              html_block = "<hr>".join(fetch_and_highlight(link) for link in links)
              css = CSS(string=HtmlFormatter().get_style_defs() + """
                  @page { margin: 1cm; }
                  body { font-family: Arial, sans-serif; color: #111; background: #fff; }
                  h1, h2, h3, h4 { color: #111; }
                  img { max-width: 100%; height: auto; }
                  a { color: #0366d6; text-decoration: none; }
              """)
              filename = f"{name}_trial.pdf"
              flush(f"🧾 Rendering {filename}...")
              HTML(string=html_block, base_url=BASE_URL).write_pdf(
                  filename,
                  stylesheets=[css],
                  presentational_hints=True,
                  metadata={
                      "Title": f"{name} Docs (Trial)",
                      "Author": "Next.js Docs Archiver",
                      "Subject": "Trial PDF with first 10 docs and syntax highlighting",
                  }
              )
              flush(f"✅ Finished {filename}")
              return filename

          app_links, pages_links = get_links()
          flush(f"📄 Found {len(app_links)} App pages and {len(pages_links)} Pages pages (limited to 10 each).")

          app_file = render_group("AppRouter", app_links)
          pages_file = render_group("PagesRouter", pages_links)

          flush("🧩 Merging trial PDFs...")
          merger = PdfMerger()
          for f in [app_file, pages_file]:
              merger.append(f)
          merger.write("NextJS_Trial_10_Docs.pdf")
          merger.close()
          flush("🎉 Trial PDF ready with highlighting!")
          EOF

      - name: Upload Trial PDF
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-docs-trial
          path: NextJS_Trial_10_Docs.pdf