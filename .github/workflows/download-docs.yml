name: Build Next.js Canary Docs PDF

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # daily at midnight UTC

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            jq \
            nodejs \
            npm \
            git

      - name: Clone Next.js repository
        run: |
          set -euo pipefail
          REPO="https://github.com/vercel/next.js.git"
          DOCS_DIR="nextjs-docs/canary_docs"
          rm -rf "$DOCS_DIR"

          if git ls-remote --exit-code --heads "$REPO" canary >/dev/null 2>&1; then
            echo "Cloning canary branch..."
            git clone --depth=1 --branch canary "$REPO" "$DOCS_DIR"
          else
            echo "Canary branch not found; cloning default branch..."
            git clone --depth=1 "$REPO" "$DOCS_DIR"
          fi

      - name: Get latest docs commit hash
        id: get_hash
        run: |
          LATEST=$(git -C nextjs-docs/canary_docs rev-parse --short HEAD)
          echo "latest=$LATEST" >> $GITHUB_OUTPUT

      - name: Read previous docs hash (if any)
        id: get_old
        run: |
          OLD=$(cat docs_hash.txt 2>/dev/null || echo "")
          echo "old=$OLD" >> $GITHUB_OUTPUT

      - name: Build PDF if docs changed
        if: ${{ steps.get_hash.outputs.latest != steps.get_old.outputs.old }}
        run: |
          set -euo pipefail
          echo "Docs changed. Building PDF..."

          mkdir -p pdf-docs
          DOCS_PATH="nextjs-docs/canary_docs/docs"
          HTML_FILE="pdf-docs/NextJS_Canary_Docs.html"
          PDF_FILE="pdf-docs/NextJS_Canary_Docs.pdf"

          # Temp Node project
          rm -rf tmp_mdx_project
          mkdir tmp_mdx_project
          cd tmp_mdx_project
          npm init -y
          npm install @mdx-js/mdx puppeteer
          cd ../

          # Collect all MDX/MD files
          mapfile -t files < <(find "$DOCS_PATH" -type f \( -name "*.md" -o -name "*.mdx" \) | sort)
          if [ "${#files[@]}" -eq 0 ]; then
            echo "No Markdown/MDX files found in $DOCS_PATH"
            exit 1
          fi

          # Save file list as JSON
          FILES_JSON="tmp_files.json"
          printf '%s\n' "${files[@]}" | jq -R . | jq -s . > "$FILES_JSON"

          # HTML header
          echo "<html><head><meta charset='UTF-8'></head><body>" > "$HTML_FILE"

          # Compile MDX in parallel safely
          node -e "
            const fs = require('fs');
            const mdx = require('./tmp_mdx_project/node_modules/@mdx-js/mdx');
            const files = JSON.parse(fs.readFileSync('$FILES_JSON', 'utf8'));

            async function compileFiles() {
              const promises = files.map(f => mdx.compile(fs.readFileSync(f, 'utf8')).then(result => {
                return '<div>' + result.value + '</div>';
              }));
              const results = await Promise.all(promises);
              fs.appendFileSync('$HTML_FILE', results.join('\\n'));
            }

            compileFiles().catch(err => { console.error(err); process.exit(1); });
          "

          # Close HTML
          echo "</body></html>" >> "$HTML_FILE"

          # Convert HTML → PDF
          node -e "
            const puppeteer = require('./tmp_mdx_project/node_modules/puppeteer');
            (async () => {
              const browser = await puppeteer.launch({args:['--no-sandbox','--disable-setuid-sandbox']});
              const page = await browser.newPage();
              await page.goto('file://' + process.cwd() + '/$HTML_FILE', {waitUntil: 'networkidle0'});
              await page.pdf({path: '$PDF_FILE', format: 'A4', printBackground: true});
              await browser.close();
            })();
          "

          # Record new hash
          echo "${{ steps.get_hash.outputs.latest }}" > docs_hash.txt
          echo "Recorded new docs hash."

      - name: Generate changelog
        if: ${{ steps.get_hash.outputs.latest != steps.get_old.outputs.old }}
        id: changelog
        run: |
          git -C nextjs-docs/canary_docs diff --name-only ${{ steps.get_old.outputs.old }} ${{ steps.get_hash.outputs.latest }} > docs-changed.txt || echo "" > docs-changed.txt
          CHANGES=$(cat docs-changed.txt)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload PDF artifact
        if: ${{ steps.get_hash.outputs.latest != steps.get_old.outputs.old }}
        uses: actions/upload-artifact@v4
        with:
          name: NextJS-Canary-Docs
          path: pdf-docs/NextJS_Canary_Docs.pdf

      - name: Create / Update PR with updated PDF + changelog
        if: ${{ steps.get_hash.outputs.latest != steps.get_old.outputs.old }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(docs): update Next.js Canary PDF — ${{ steps.get_hash.outputs.latest }}"
          branch: update-nextjs-canary-docs
          title: "Update Next.js Canary Docs PDF — ${{ steps.get_hash.outputs.latest }}"
          body: |
            Automated update of the Next.js Canary docs PDF.

            - docs commit: `${{ steps.get_hash.outputs.latest }}`
            - updated files:
              ${{ steps.changelog.outputs.changelog }}
          base: main