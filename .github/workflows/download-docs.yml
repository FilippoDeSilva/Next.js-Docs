name: Generate Professional Next.js Docs PDF

on:
  workflow_dispatch:

jobs:
  generate-pdf:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install puppeteer pdf-merger-js axios

      - name: Generate PDF
        run: |
          node <<'JS'
          const puppeteer = require('puppeteer');
          const axios = require('axios');
          const PDFMerger = require('pdf-merger-js').default;

          const BASE_URL = 'https://nextjs.org/docs';
          const OUTPUT_PDF = 'NextJS_Docs_Professional.pdf';

          async function getAllDocPages() {
            const { data: html } = await axios.get(BASE_URL);
            const regex = /href="(\/docs[^"]+)"/g;
            const pages = new Set();
            let match;
            while ((match = regex.exec(html)) !== null) {
              pages.add(match[1]);
            }
            return Array.from(pages);
          }

          (async () => {
            const pages = await getAllDocPages();
            console.log('Found', pages.length, 'doc pages');

            const browser = await puppeteer.launch({ args: ['--no-sandbox'] });
            const page = await browser.newPage();
            const merger = new PDFMerger();

            // Set wide viewport for long code blocks
            await page.setViewport({ width: 1600, height: 1200 });

            for (const pagePath of pages) {
              const url = 'https://nextjs.org' + pagePath;
              try {
                console.log('Processing', url);

                // Wait longer to allow all content to load
                await page.goto(url, { waitUntil: 'networkidle2', timeout: 120000 });

                // Manipulate DOM before PDF generation
                await page.evaluate(() => {
                  // Remove headers, footers, and left sidebar
                  document.querySelectorAll('header, footer, nav, aside, [aria-label="Feedback"]').forEach(el => el.remove());

                  // Center the main content
                  const main = document.querySelector('main');
                  if(main){
                    main.style.margin = '0 auto';
                    main.style.maxWidth = '1000px';
                  }

                  // Force all collapsible sections to be expanded
                  document.querySelectorAll('details').forEach(detail => {
                    detail.open = true;
                  });

                  // Force code blocks to allow horizontal scroll
                  document.querySelectorAll('pre').forEach(pre => {
                    pre.style.overflowX = 'auto';
                  });
                });

                const pdfBuffer = await page.pdf({
                  format: 'A4',
                  printBackground: true,
                  margin: { top: 10, bottom: 10, left: 10, right: 10 },
                });

                await merger.add(pdfBuffer);
                console.log(`Added ${pagePath} to PDF`);
              } catch (err) {
                console.error(`Error processing ${pagePath}:`, err.message);
              }
            }

            await merger.save(OUTPUT_PDF);
            await browser.close();
            console.log('Professional PDF generated:', OUTPUT_PDF);
          })();
          JS

      - name: Commit PDF to repository
        run: |
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git add NextJS_Docs_Professional.pdf
          git commit -m "Update Professional Next.js Docs PDF" || echo "No changes to commit"
          git push

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: NextJS_Docs_Professional
          path: NextJS_Docs_Professional.pdf